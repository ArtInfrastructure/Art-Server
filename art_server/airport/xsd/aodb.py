#!/usr/bin/env python

#
# Generated Mon Jun  8 10:52:36 2009 by generateDS.py.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper:
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class _MemberSpec(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type(self): return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


#
# Data representation classes.
#

class Envelope(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Header=None, Body=None):
        self.Header = Header
        self.Body = Body
    def factory(*args_, **kwargs_):
        if Envelope.subclass:
            return Envelope.subclass(*args_, **kwargs_)
        else:
            return Envelope(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Header(self): return self.Header
    def set_Header(self, Header): self.Header = Header
    def get_Body(self): return self.Body
    def set_Body(self, Body): self.Body = Body
    def export(self, outfile, level, namespace_='', name_='Envelope', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Envelope')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Envelope'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Envelope'):
        if self.Header is not None:
            showIndent(outfile, level)
            outfile.write('<%sHeader>%s</%sHeader>\n' % (namespace_, self.format_integer(self.Header, input_name='Header'), namespace_))
        if self.Body is not None:
            showIndent(outfile, level)
            outfile.write('<%sBody>%s</%sBody>\n' % (namespace_, self.format_integer(self.Body, input_name='Body'), namespace_))
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Body is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Envelope'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Header:
            showIndent(outfile, level)
            outfile.write('Header=model_.Header(\n')
            self.Header.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Body:
            showIndent(outfile, level)
            outfile.write('Body=model_.Body(\n')
            self.Body.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Header':
            obj_ = Header.factory()
            obj_.build(child_)
            self.set_Header(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Body':
            obj_ = Body.factory()
            obj_.build(child_)
            self.set_Body(obj_)
# end class Envelope


class Header(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MessageSentDateTime=None, MessageSequenceNumber=None, RequestSequenceNumber=None, RequestSource=None, MessageNumber=None, TotalMessages=None, MessageFunction=None, MessageType=None, RequestType=None, SenderID=None):
        self.MessageSentDateTime = MessageSentDateTime
        self.MessageSequenceNumber = MessageSequenceNumber
        self.RequestSequenceNumber = RequestSequenceNumber
        self.RequestSource = RequestSource
        self.MessageNumber = MessageNumber
        self.TotalMessages = TotalMessages
        self.MessageFunction = MessageFunction
        self.MessageType = MessageType
        self.RequestType = RequestType
        self.SenderID = SenderID
    def factory(*args_, **kwargs_):
        if Header.subclass:
            return Header.subclass(*args_, **kwargs_)
        else:
            return Header(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MessageSentDateTime(self): return self.MessageSentDateTime
    def set_MessageSentDateTime(self, MessageSentDateTime): self.MessageSentDateTime = MessageSentDateTime
    def validate_MessageSentDateTime(self, value):
        # Validate type MessageSentDateTime, a restriction on xsd:dateTime.
        pass
    def get_MessageSequenceNumber(self): return self.MessageSequenceNumber
    def set_MessageSequenceNumber(self, MessageSequenceNumber): self.MessageSequenceNumber = MessageSequenceNumber
    def validate_MessageSequenceNumber(self, value):
        # Validate type MessageSequenceNumber, a restriction on xsd:nonNegativeInteger.
        pass
    def get_RequestSequenceNumber(self): return self.RequestSequenceNumber
    def set_RequestSequenceNumber(self, RequestSequenceNumber): self.RequestSequenceNumber = RequestSequenceNumber
    def validate_RequestSequenceNumber(self, value):
        # Validate type RequestSequenceNumber, a restriction on xsd:nonNegativeInteger.
        pass
    def get_RequestSource(self): return self.RequestSource
    def set_RequestSource(self, RequestSource): self.RequestSource = RequestSource
    def validate_RequestSource(self, value):
        # Validate type RequestSource, a restriction on xsd:string.
        pass
    def get_MessageNumber(self): return self.MessageNumber
    def set_MessageNumber(self, MessageNumber): self.MessageNumber = MessageNumber
    def validate_MessageNumber(self, value):
        # Validate type MessageNumber, a restriction on xsd:nonNegativeInteger.
        pass
    def get_TotalMessages(self): return self.TotalMessages
    def set_TotalMessages(self, TotalMessages): self.TotalMessages = TotalMessages
    def validate_TotalMessages(self, value):
        # Validate type TotalMessages, a restriction on xsd:nonNegativeInteger.
        pass
    def get_MessageFunction(self): return self.MessageFunction
    def set_MessageFunction(self, MessageFunction): self.MessageFunction = MessageFunction
    def validate_MessageFunction(self, value):
        # Validate type MessageFunction, a restriction on xsd:string.
        pass
    def get_MessageType(self): return self.MessageType
    def set_MessageType(self, MessageType): self.MessageType = MessageType
    def validate_MessageType(self, value):
        # Validate type MessageType, a restriction on xsd:string.
        pass
    def get_RequestType(self): return self.RequestType
    def set_RequestType(self, RequestType): self.RequestType = RequestType
    def get_SenderID(self): return self.SenderID
    def set_SenderID(self, SenderID): self.SenderID = SenderID
    def validate_SenderID(self, value):
        # Validate type SenderID, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='Header', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Header')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Header'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Header'):
        if self.MessageSentDateTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessageSentDateTime>%s</%sMessageSentDateTime>\n' % (namespace_, self.format_string(quote_xml(self.MessageSentDateTime).encode(ExternalEncoding), input_name='MessageSentDateTime'), namespace_))
        if self.MessageSequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessageSequenceNumber>%s</%sMessageSequenceNumber>\n' % (namespace_, self.format_integer(self.MessageSequenceNumber, input_name='MessageSequenceNumber'), namespace_))
        if self.RequestSequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestSequenceNumber>%s</%sRequestSequenceNumber>\n' % (namespace_, self.format_integer(self.RequestSequenceNumber, input_name='RequestSequenceNumber'), namespace_))
        if self.RequestSource is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestSource>%s</%sRequestSource>\n' % (namespace_, self.format_string(quote_xml(self.RequestSource).encode(ExternalEncoding), input_name='RequestSource'), namespace_))
        if self.MessageNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessageNumber>%s</%sMessageNumber>\n' % (namespace_, self.format_integer(self.MessageNumber, input_name='MessageNumber'), namespace_))
        if self.TotalMessages is not None:
            showIndent(outfile, level)
            outfile.write('<%sTotalMessages>%s</%sTotalMessages>\n' % (namespace_, self.format_integer(self.TotalMessages, input_name='TotalMessages'), namespace_))
        if self.MessageFunction is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessageFunction>%s</%sMessageFunction>\n' % (namespace_, self.format_string(quote_xml(self.MessageFunction).encode(ExternalEncoding), input_name='MessageFunction'), namespace_))
        if self.MessageType is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessageType>%s</%sMessageType>\n' % (namespace_, self.format_string(quote_xml(self.MessageType).encode(ExternalEncoding), input_name='MessageType'), namespace_))
        if self.RequestType is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestType>%s</%sRequestType>\n' % (namespace_, self.format_integer(self.RequestType, input_name='RequestType'), namespace_))
        if self.SenderID is not None:
            showIndent(outfile, level)
            outfile.write('<%sSenderID>%s</%sSenderID>\n' % (namespace_, self.format_string(quote_xml(self.SenderID).encode(ExternalEncoding), input_name='SenderID'), namespace_))
    def hasContent_(self):
        if (
            self.MessageSentDateTime is not None or
            self.MessageSequenceNumber is not None or
            self.RequestSequenceNumber is not None or
            self.RequestSource is not None or
            self.MessageNumber is not None or
            self.TotalMessages is not None or
            self.MessageFunction is not None or
            self.MessageType is not None or
            self.RequestType is not None or
            self.SenderID is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Header'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('MessageSentDateTime=%s,\n' % quote_python(self.MessageSentDateTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageSequenceNumber=%d,\n' % self.MessageSequenceNumber)
        showIndent(outfile, level)
        outfile.write('RequestSequenceNumber=%d,\n' % self.RequestSequenceNumber)
        showIndent(outfile, level)
        outfile.write('RequestSource=%s,\n' % quote_python(self.RequestSource).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageNumber=%d,\n' % self.MessageNumber)
        showIndent(outfile, level)
        outfile.write('TotalMessages=%d,\n' % self.TotalMessages)
        showIndent(outfile, level)
        outfile.write('MessageFunction=%s,\n' % quote_python(self.MessageFunction).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageType=%s,\n' % quote_python(self.MessageType).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RequestType=%s,\n' % quote_python(self.RequestType).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SenderID=%s,\n' % quote_python(self.SenderID).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MessageSentDateTime':
            MessageSentDateTime_ = ''
            for text__content_ in child_.childNodes:
                MessageSentDateTime_ += text__content_.nodeValue
            self.MessageSentDateTime = MessageSentDateTime_
            self.validate_MessageSentDateTime(self.MessageSentDateTime)    # validate type MessageSentDateTime
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MessageSequenceNumber':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (MessageSequenceNumber): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.MessageSequenceNumber = ival_
            self.validate_MessageSequenceNumber(self.MessageSequenceNumber)    # validate type MessageSequenceNumber
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RequestSequenceNumber':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (RequestSequenceNumber): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.RequestSequenceNumber = ival_
            self.validate_RequestSequenceNumber(self.RequestSequenceNumber)    # validate type RequestSequenceNumber
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RequestSource':
            RequestSource_ = ''
            for text__content_ in child_.childNodes:
                RequestSource_ += text__content_.nodeValue
            self.RequestSource = RequestSource_
            self.validate_RequestSource(self.RequestSource)    # validate type RequestSource
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MessageNumber':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (MessageNumber): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.MessageNumber = ival_
            self.validate_MessageNumber(self.MessageNumber)    # validate type MessageNumber
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'TotalMessages':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (TotalMessages): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.TotalMessages = ival_
            self.validate_TotalMessages(self.TotalMessages)    # validate type TotalMessages
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MessageFunction':
            MessageFunction_ = ''
            for text__content_ in child_.childNodes:
                MessageFunction_ += text__content_.nodeValue
            self.MessageFunction = MessageFunction_
            self.validate_MessageFunction(self.MessageFunction)    # validate type MessageFunction
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MessageType':
            MessageType_ = ''
            for text__content_ in child_.childNodes:
                MessageType_ += text__content_.nodeValue
            self.MessageType = MessageType_
            self.validate_MessageType(self.MessageType)    # validate type MessageType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RequestType':
            RequestType_ = ''
            for text__content_ in child_.childNodes:
                RequestType_ += text__content_.nodeValue
            self.RequestType = RequestType_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SenderID':
            SenderID_ = ''
            for text__content_ in child_.childNodes:
                SenderID_ += text__content_.nodeValue
            self.SenderID = SenderID_
            self.validate_SenderID(self.SenderID)    # validate type SenderID
# end class Header


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FlightLegType=None, ResAllocation=None):
        self.FlightLegType = FlightLegType
        self.ResAllocation = ResAllocation
    def factory(*args_, **kwargs_):
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FlightLegType(self): return self.FlightLegType
    def set_FlightLegType(self, FlightLegType): self.FlightLegType = FlightLegType
    def get_ResAllocation(self): return self.ResAllocation
    def set_ResAllocation(self, ResAllocation): self.ResAllocation = ResAllocation
    def export(self, outfile, level, namespace_='', name_='RequestType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RequestType'):
        if self.FlightLegType is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightLegType>%s</%sFlightLegType>\n' % (namespace_, self.format_integer(self.FlightLegType, input_name='FlightLegType'), namespace_))
        if self.ResAllocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sResAllocation>%s</%sResAllocation>\n' % (namespace_, self.format_integer(self.ResAllocation, input_name='ResAllocation'), namespace_))
    def hasContent_(self):
        if (
            self.FlightLegType is not None or
            self.ResAllocation is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RequestType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FlightLegType:
            showIndent(outfile, level)
            outfile.write('FlightLegType=model_.FlightLegType(\n')
            self.FlightLegType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ResAllocation:
            showIndent(outfile, level)
            outfile.write('ResAllocation=model_.ResAllocation(\n')
            self.ResAllocation.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightLegType':
            obj_ = FlightLegType.factory()
            obj_.build(child_)
            self.set_FlightLegType(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ResAllocation':
            obj_ = ResAllocation.factory()
            obj_.build(child_)
            self.set_ResAllocation(obj_)
# end class RequestType


class FlightLegType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ModTime=None, FromTime=None, ToTime=None, RollingTimeWindow=None, InOutbound=None, Carrier=None, FlightNumber=None):
        self.ModTime = ModTime
        self.FromTime = FromTime
        self.ToTime = ToTime
        self.RollingTimeWindow = RollingTimeWindow
        self.InOutbound = InOutbound
        self.Carrier = Carrier
        self.FlightNumber = FlightNumber
    def factory(*args_, **kwargs_):
        if FlightLegType.subclass:
            return FlightLegType.subclass(*args_, **kwargs_)
        else:
            return FlightLegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ModTime(self): return self.ModTime
    def set_ModTime(self, ModTime): self.ModTime = ModTime
    def get_FromTime(self): return self.FromTime
    def set_FromTime(self, FromTime): self.FromTime = FromTime
    def get_ToTime(self): return self.ToTime
    def set_ToTime(self, ToTime): self.ToTime = ToTime
    def get_RollingTimeWindow(self): return self.RollingTimeWindow
    def set_RollingTimeWindow(self, RollingTimeWindow): self.RollingTimeWindow = RollingTimeWindow
    def get_InOutbound(self): return self.InOutbound
    def set_InOutbound(self, InOutbound): self.InOutbound = InOutbound
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def validate_Carrier(self, value):
        # validate type Carrier
        pass
    def get_FlightNumber(self): return self.FlightNumber
    def set_FlightNumber(self, FlightNumber): self.FlightNumber = FlightNumber
    def validate_FlightNumber(self, value):
        # Validate type FlightNumber, a restriction on xsd:positiveInteger.
        pass
    def export(self, outfile, level, namespace_='', name_='FlightLegType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='FlightLegType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='FlightLegType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FlightLegType'):
        if self.ModTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sModTime>%s</%sModTime>\n' % (namespace_, self.format_integer(self.ModTime, input_name='ModTime'), namespace_))
        if self.FromTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sFromTime>%s</%sFromTime>\n' % (namespace_, self.format_integer(self.FromTime, input_name='FromTime'), namespace_))
        if self.ToTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sToTime>%s</%sToTime>\n' % (namespace_, self.format_integer(self.ToTime, input_name='ToTime'), namespace_))
        if self.RollingTimeWindow is not None:
            showIndent(outfile, level)
            outfile.write('<%sRollingTimeWindow>%s</%sRollingTimeWindow>\n' % (namespace_, self.format_integer(self.RollingTimeWindow, input_name='RollingTimeWindow'), namespace_))
        if self.InOutbound is not None:
            showIndent(outfile, level)
            outfile.write('<%sInOutbound>%s</%sInOutbound>\n' % (namespace_, self.format_integer(self.InOutbound, input_name='InOutbound'), namespace_))
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrier>%s</%sCarrier>\n' % (namespace_, self.format_string(quote_xml(self.Carrier).encode(ExternalEncoding), input_name='Carrier'), namespace_))
        if self.FlightNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightNumber>%s</%sFlightNumber>\n' % (namespace_, self.format_integer(self.FlightNumber, input_name='FlightNumber'), namespace_))
    def hasContent_(self):
        if (
            self.ModTime is not None or
            self.FromTime is not None or
            self.ToTime is not None or
            self.RollingTimeWindow is not None or
            self.InOutbound is not None or
            self.Carrier is not None or
            self.FlightNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FlightLegType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ModTime=%s,\n' % quote_python(self.ModTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FromTime=%s,\n' % quote_python(self.FromTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ToTime=%s,\n' % quote_python(self.ToTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RollingTimeWindow=%d,\n' % self.RollingTimeWindow)
        showIndent(outfile, level)
        outfile.write('InOutbound=%s,\n' % quote_python(self.InOutbound).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Carrier=%s,\n' % quote_python(self.Carrier).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FlightNumber=%d,\n' % self.FlightNumber)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ModTime':
            ModTime_ = ''
            for text__content_ in child_.childNodes:
                ModTime_ += text__content_.nodeValue
            self.ModTime = ModTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FromTime':
            FromTime_ = ''
            for text__content_ in child_.childNodes:
                FromTime_ += text__content_.nodeValue
            self.FromTime = FromTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ToTime':
            ToTime_ = ''
            for text__content_ in child_.childNodes:
                ToTime_ += text__content_.nodeValue
            self.ToTime = ToTime_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RollingTimeWindow':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (RollingTimeWindow): %s' % exp)
                self.RollingTimeWindow = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'InOutbound':
            InOutbound_ = ''
            for text__content_ in child_.childNodes:
                InOutbound_ += text__content_.nodeValue
            self.InOutbound = InOutbound_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Carrier':
            Carrier_ = ''
            for text__content_ in child_.childNodes:
                Carrier_ += text__content_.nodeValue
            self.Carrier = Carrier_
            self.validate_Carrier(self.Carrier)    # validate type Carrier
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightNumber':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (FlightNumber): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.FlightNumber = ival_
            self.validate_FlightNumber(self.FlightNumber)    # validate type FlightNumber
# end class FlightLegType


class ResAllocation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ModTime=None):
        self.ModTime = ModTime
    def factory(*args_, **kwargs_):
        if ResAllocation.subclass:
            return ResAllocation.subclass(*args_, **kwargs_)
        else:
            return ResAllocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ModTime(self): return self.ModTime
    def set_ModTime(self, ModTime): self.ModTime = ModTime
    def export(self, outfile, level, namespace_='', name_='ResAllocation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='ResAllocation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='ResAllocation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResAllocation'):
        if self.ModTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sModTime>%s</%sModTime>\n' % (namespace_, self.format_integer(self.ModTime, input_name='ModTime'), namespace_))
    def hasContent_(self):
        if (
            self.ModTime is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ResAllocation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ModTime=%s,\n' % quote_python(self.ModTime).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ModTime':
            ModTime_ = ''
            for text__content_ in child_.childNodes:
                ModTime_ += text__content_.nodeValue
            self.ModTime = ModTime_
# end class ResAllocation


class Body(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FlightLeg=None, ResourceAllocation=None, RefData=None, Fault=None):
        if FlightLeg is None:
            self.FlightLeg = []
        else:
            self.FlightLeg = FlightLeg
        if ResourceAllocation is None:
            self.ResourceAllocation = []
        else:
            self.ResourceAllocation = ResourceAllocation
        if RefData is None:
            self.RefData = []
        else:
            self.RefData = RefData
        self.Fault = Fault
    def factory(*args_, **kwargs_):
        if Body.subclass:
            return Body.subclass(*args_, **kwargs_)
        else:
            return Body(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FlightLeg(self): return self.FlightLeg
    def set_FlightLeg(self, FlightLeg): self.FlightLeg = FlightLeg
    def add_FlightLeg(self, value): self.FlightLeg.append(value)
    def insert_FlightLeg(self, index, value): self.FlightLeg[index] = value
    def get_ResourceAllocation(self): return self.ResourceAllocation
    def set_ResourceAllocation(self, ResourceAllocation): self.ResourceAllocation = ResourceAllocation
    def add_ResourceAllocation(self, value): self.ResourceAllocation.append(value)
    def insert_ResourceAllocation(self, index, value): self.ResourceAllocation[index] = value
    def get_RefData(self): return self.RefData
    def set_RefData(self, RefData): self.RefData = RefData
    def add_RefData(self, value): self.RefData.append(value)
    def insert_RefData(self, index, value): self.RefData[index] = value
    def get_Fault(self): return self.Fault
    def set_Fault(self, Fault): self.Fault = Fault
    def export(self, outfile, level, namespace_='', name_='Body', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Body')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Body'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Body'):
        for FlightLeg_ in self.FlightLeg:
            showIndent(outfile, level)
            outfile.write('<%sFlightLeg>%s</%sFlightLeg>\n' % (namespace_, self.format_integer(FlightLeg_, input_name='FlightLeg'), namespace_))
        for ResourceAllocation_ in self.ResourceAllocation:
            showIndent(outfile, level)
            outfile.write('<%sResourceAllocation>%s</%sResourceAllocation>\n' % (namespace_, self.format_integer(ResourceAllocation_, input_name='ResourceAllocation'), namespace_))
        for RefData_ in self.RefData:
            showIndent(outfile, level)
            outfile.write('<%sRefData>%s</%sRefData>\n' % (namespace_, self.format_integer(RefData_, input_name='RefData'), namespace_))
        if self.Fault is not None:
            showIndent(outfile, level)
            outfile.write('<%sFault>%s</%sFault>\n' % (namespace_, self.format_integer(self.Fault, input_name='Fault'), namespace_))
    def hasContent_(self):
        if (
            self.FlightLeg is not None or
            self.ResourceAllocation is not None or
            self.RefData is not None or
            self.Fault is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Body'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('FlightLeg=[\n')
        level += 1
        for FlightLeg in self.FlightLeg:
            showIndent(outfile, level)
            outfile.write('model_.FlightLeg(\n')
            FlightLeg.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ResourceAllocation=[\n')
        level += 1
        for ResourceAllocation in self.ResourceAllocation:
            showIndent(outfile, level)
            outfile.write('model_.ResourceAllocation(\n')
            ResourceAllocation.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('RefData=[\n')
        level += 1
        for RefData in self.RefData:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(RefData).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Fault:
            showIndent(outfile, level)
            outfile.write('Fault=model_.Fault(\n')
            self.Fault.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightLeg':
            obj_ = FlightLeg.factory()
            obj_.build(child_)
            self.FlightLeg.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ResourceAllocation':
            obj_ = ResourceAllocation.factory()
            obj_.build(child_)
            self.ResourceAllocation.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RefData':
            RefData_ = ''
            for text__content_ in child_.childNodes:
                RefData_ += text__content_.nodeValue
            self.RefData.append(RefData_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Fault':
            obj_ = Fault.factory()
            obj_.build(child_)
            self.set_Fault(obj_)
# end class Body


class RefData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if RefData.subclass:
            return RefData.subclass(*args_, **kwargs_)
        else:
            return RefData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='RefData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='RefData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='RefData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RefData'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RefData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class RefData


class DisplayText(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, IdSeq=None, Text=None):
        self.Code = Code
        self.IdSeq = IdSeq
        self.Text = Text
    def factory(*args_, **kwargs_):
        if DisplayText.subclass:
            return DisplayText.subclass(*args_, **kwargs_)
        else:
            return DisplayText(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_IdSeq(self): return self.IdSeq
    def set_IdSeq(self, IdSeq): self.IdSeq = IdSeq
    def get_Text(self): return self.Text
    def set_Text(self, Text): self.Text = Text
    def export(self, outfile, level, namespace_='', name_='DisplayText', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='DisplayText')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='DisplayText'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DisplayText'):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.format_integer(self.Code, input_name='Code'), namespace_))
        if self.IdSeq is not None:
            showIndent(outfile, level)
            outfile.write('<%sIdSeq>%s</%sIdSeq>\n' % (namespace_, self.format_integer(self.IdSeq, input_name='IdSeq'), namespace_))
        if self.Text is not None:
            showIndent(outfile, level)
            outfile.write('<%sText>%s</%sText>\n' % (namespace_, self.format_integer(self.Text, input_name='Text'), namespace_))
    def hasContent_(self):
        if (
            self.Code is not None or
            self.IdSeq is not None or
            self.Text is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DisplayText'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IdSeq=%d,\n' % self.IdSeq)
        showIndent(outfile, level)
        outfile.write('Text=%s,\n' % quote_python(self.Text).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Code':
            Code_ = ''
            for text__content_ in child_.childNodes:
                Code_ += text__content_.nodeValue
            self.Code = Code_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'IdSeq':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (IdSeq): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.IdSeq = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Text':
            Text_ = ''
            for text__content_ in child_.childNodes:
                Text_ += text__content_.nodeValue
            self.Text = Text_
# end class DisplayText


class DisplayObject(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, IdSeq=None, Description=None):
        self.Name = Name
        self.IdSeq = IdSeq
        self.Description = Description
    def factory(*args_, **kwargs_):
        if DisplayObject.subclass:
            return DisplayObject.subclass(*args_, **kwargs_)
        else:
            return DisplayObject(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_IdSeq(self): return self.IdSeq
    def set_IdSeq(self, IdSeq): self.IdSeq = IdSeq
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='', name_='DisplayObject', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='DisplayObject')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='DisplayObject'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DisplayObject'):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('<%sName>%s</%sName>\n' % (namespace_, self.format_integer(self.Name, input_name='Name'), namespace_))
        if self.IdSeq is not None:
            showIndent(outfile, level)
            outfile.write('<%sIdSeq>%s</%sIdSeq>\n' % (namespace_, self.format_integer(self.IdSeq, input_name='IdSeq'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.format_integer(self.Description, input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Name is not None or
            self.IdSeq is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DisplayObject'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IdSeq=%d,\n' % self.IdSeq)
        showIndent(outfile, level)
        outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Name':
            Name_ = ''
            for text__content_ in child_.childNodes:
                Name_ += text__content_.nodeValue
            self.Name = Name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'IdSeq':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (IdSeq): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.IdSeq = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Description':
            Description_ = ''
            for text__content_ in child_.childNodes:
                Description_ += text__content_.nodeValue
            self.Description = Description_
# end class DisplayObject


class PublicStatusRemark(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RemarkCode=None, RemarkText=None):
        self.RemarkCode = RemarkCode
        self.RemarkText = RemarkText
    def factory(*args_, **kwargs_):
        if PublicStatusRemark.subclass:
            return PublicStatusRemark.subclass(*args_, **kwargs_)
        else:
            return PublicStatusRemark(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RemarkCode(self): return self.RemarkCode
    def set_RemarkCode(self, RemarkCode): self.RemarkCode = RemarkCode
    def validate_RemarkCode(self, value):
        # Validate type RemarkCode, a restriction on xsd:string.
        pass
    def get_RemarkText(self): return self.RemarkText
    def set_RemarkText(self, RemarkText): self.RemarkText = RemarkText
    def validate_RemarkText(self, value):
        # validate type RemarkText
        pass
    def export(self, outfile, level, namespace_='', name_='PublicStatusRemark', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='PublicStatusRemark')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='PublicStatusRemark'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PublicStatusRemark'):
        if self.RemarkCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sRemarkCode>%s</%sRemarkCode>\n' % (namespace_, self.format_string(quote_xml(self.RemarkCode).encode(ExternalEncoding), input_name='RemarkCode'), namespace_))
        if self.RemarkText is not None:
            showIndent(outfile, level)
            outfile.write('<%sRemarkText>%s</%sRemarkText>\n' % (namespace_, self.format_string(quote_xml(self.RemarkText).encode(ExternalEncoding), input_name='RemarkText'), namespace_))
    def hasContent_(self):
        if (
            self.RemarkCode is not None or
            self.RemarkText is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PublicStatusRemark'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('RemarkCode=%s,\n' % quote_python(self.RemarkCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RemarkText=%s,\n' % quote_python(self.RemarkText).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RemarkCode':
            RemarkCode_ = ''
            for text__content_ in child_.childNodes:
                RemarkCode_ += text__content_.nodeValue
            self.RemarkCode = RemarkCode_
            self.validate_RemarkCode(self.RemarkCode)    # validate type RemarkCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RemarkText':
            RemarkText_ = ''
            for text__content_ in child_.childNodes:
                RemarkText_ += text__content_.nodeValue
            self.RemarkText = RemarkText_
            self.validate_RemarkText(self.RemarkText)    # validate type RemarkText
# end class PublicStatusRemark


class StaffStatusRemark(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RemarkCode=None, RemarkText=None):
        self.RemarkCode = RemarkCode
        self.RemarkText = RemarkText
    def factory(*args_, **kwargs_):
        if StaffStatusRemark.subclass:
            return StaffStatusRemark.subclass(*args_, **kwargs_)
        else:
            return StaffStatusRemark(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RemarkCode(self): return self.RemarkCode
    def set_RemarkCode(self, RemarkCode): self.RemarkCode = RemarkCode
    def validate_RemarkCode(self, value):
        # Validate type RemarkCode, a restriction on xsd:string.
        pass
    def get_RemarkText(self): return self.RemarkText
    def set_RemarkText(self, RemarkText): self.RemarkText = RemarkText
    def validate_RemarkText(self, value):
        # validate type RemarkText
        pass
    def export(self, outfile, level, namespace_='', name_='StaffStatusRemark', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='StaffStatusRemark')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='StaffStatusRemark'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StaffStatusRemark'):
        if self.RemarkCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sRemarkCode>%s</%sRemarkCode>\n' % (namespace_, self.format_string(quote_xml(self.RemarkCode).encode(ExternalEncoding), input_name='RemarkCode'), namespace_))
        if self.RemarkText is not None:
            showIndent(outfile, level)
            outfile.write('<%sRemarkText>%s</%sRemarkText>\n' % (namespace_, self.format_string(quote_xml(self.RemarkText).encode(ExternalEncoding), input_name='RemarkText'), namespace_))
    def hasContent_(self):
        if (
            self.RemarkCode is not None or
            self.RemarkText is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='StaffStatusRemark'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('RemarkCode=%s,\n' % quote_python(self.RemarkCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RemarkText=%s,\n' % quote_python(self.RemarkText).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RemarkCode':
            RemarkCode_ = ''
            for text__content_ in child_.childNodes:
                RemarkCode_ += text__content_.nodeValue
            self.RemarkCode = RemarkCode_
            self.validate_RemarkCode(self.RemarkCode)    # validate type RemarkCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RemarkText':
            RemarkText_ = ''
            for text__content_ in child_.childNodes:
                RemarkText_ += text__content_.nodeValue
            self.RemarkText = RemarkText_
            self.validate_RemarkText(self.RemarkText)    # validate type RemarkText
# end class StaffStatusRemark


class Fault(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FaultCode=None, FaultString=None, FaultActor=None):
        self.FaultCode = FaultCode
        self.FaultString = FaultString
        self.FaultActor = FaultActor
    def factory(*args_, **kwargs_):
        if Fault.subclass:
            return Fault.subclass(*args_, **kwargs_)
        else:
            return Fault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FaultCode(self): return self.FaultCode
    def set_FaultCode(self, FaultCode): self.FaultCode = FaultCode
    def validate_FaultCode(self, value):
        # Validate type FaultCode, a restriction on xsd:string.
        pass
    def get_FaultString(self): return self.FaultString
    def set_FaultString(self, FaultString): self.FaultString = FaultString
    def validate_FaultString(self, value):
        # Validate type FaultString, a restriction on xsd:string.
        pass
    def get_FaultActor(self): return self.FaultActor
    def set_FaultActor(self, FaultActor): self.FaultActor = FaultActor
    def validate_FaultActor(self, value):
        # Validate type FaultActor, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='Fault', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Fault')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Fault'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Fault'):
        if self.FaultCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sFaultCode>%s</%sFaultCode>\n' % (namespace_, self.format_string(quote_xml(self.FaultCode).encode(ExternalEncoding), input_name='FaultCode'), namespace_))
        if self.FaultString is not None:
            showIndent(outfile, level)
            outfile.write('<%sFaultString>%s</%sFaultString>\n' % (namespace_, self.format_string(quote_xml(self.FaultString).encode(ExternalEncoding), input_name='FaultString'), namespace_))
        if self.FaultActor is not None:
            showIndent(outfile, level)
            outfile.write('<%sFaultActor>%s</%sFaultActor>\n' % (namespace_, self.format_string(quote_xml(self.FaultActor).encode(ExternalEncoding), input_name='FaultActor'), namespace_))
    def hasContent_(self):
        if (
            self.FaultCode is not None or
            self.FaultString is not None or
            self.FaultActor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Fault'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('FaultCode=%s,\n' % quote_python(self.FaultCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FaultString=%s,\n' % quote_python(self.FaultString).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FaultActor=%s,\n' % quote_python(self.FaultActor).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FaultCode':
            FaultCode_ = ''
            for text__content_ in child_.childNodes:
                FaultCode_ += text__content_.nodeValue
            self.FaultCode = FaultCode_
            self.validate_FaultCode(self.FaultCode)    # validate type FaultCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FaultString':
            FaultString_ = ''
            for text__content_ in child_.childNodes:
                FaultString_ += text__content_.nodeValue
            self.FaultString = FaultString_
            self.validate_FaultString(self.FaultString)    # validate type FaultString
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FaultActor':
            FaultActor_ = ''
            for text__content_ in child_.childNodes:
                FaultActor_ += text__content_.nodeValue
            self.FaultActor = FaultActor_
            self.validate_FaultActor(self.FaultActor)    # validate type FaultActor
# end class Fault


class AgentData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if AgentData.subclass:
            return AgentData.subclass(*args_, **kwargs_)
        else:
            return AgentData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='AgentData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='AgentData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='AgentData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AgentData'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AgentData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class AgentData


class AircraftIdentifier(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Identifier=None, IdentifierName=None):
        self.Identifier = Identifier
        self.IdentifierName = IdentifierName
    def factory(*args_, **kwargs_):
        if AircraftIdentifier.subclass:
            return AircraftIdentifier.subclass(*args_, **kwargs_)
        else:
            return AircraftIdentifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Identifier(self): return self.Identifier
    def set_Identifier(self, Identifier): self.Identifier = Identifier
    def validate_Identifier(self, value):
        # validate type Identifier
        pass
    def get_IdentifierName(self): return self.IdentifierName
    def set_IdentifierName(self, IdentifierName): self.IdentifierName = IdentifierName
    def validate_IdentifierName(self, value):
        # validate type IdentifierName
        pass
    def export(self, outfile, level, namespace_='', name_='AircraftIdentifier', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='AircraftIdentifier')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='AircraftIdentifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AircraftIdentifier'):
        if self.Identifier is not None:
            showIndent(outfile, level)
            outfile.write('<%sIdentifier>%s</%sIdentifier>\n' % (namespace_, self.format_string(quote_xml(self.Identifier).encode(ExternalEncoding), input_name='Identifier'), namespace_))
        if self.IdentifierName is not None:
            showIndent(outfile, level)
            outfile.write('<%sIdentifierName>%s</%sIdentifierName>\n' % (namespace_, self.format_string(quote_xml(self.IdentifierName).encode(ExternalEncoding), input_name='IdentifierName'), namespace_))
    def hasContent_(self):
        if (
            self.Identifier is not None or
            self.IdentifierName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AircraftIdentifier'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Identifier=%s,\n' % quote_python(self.Identifier).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IdentifierName=%s,\n' % quote_python(self.IdentifierName).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Identifier':
            Identifier_ = ''
            for text__content_ in child_.childNodes:
                Identifier_ += text__content_.nodeValue
            self.Identifier = Identifier_
            self.validate_Identifier(self.Identifier)    # validate type Identifier
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'IdentifierName':
            IdentifierName_ = ''
            for text__content_ in child_.childNodes:
                IdentifierName_ += text__content_.nodeValue
            self.IdentifierName = IdentifierName_
            self.validate_IdentifierName(self.IdentifierName)    # validate type IdentifierName
# end class AircraftIdentifier


class AirportResources(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if AirportResources.subclass:
            return AirportResources.subclass(*args_, **kwargs_)
        else:
            return AirportResources(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='AirportResources', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='AirportResources')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='AirportResources'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AirportResources'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AirportResources'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class AirportResources


class AirportZone(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ZoneType=None, ZoneName=None):
        self.ZoneType = ZoneType
        self.ZoneName = ZoneName
    def factory(*args_, **kwargs_):
        if AirportZone.subclass:
            return AirportZone.subclass(*args_, **kwargs_)
        else:
            return AirportZone(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ZoneType(self): return self.ZoneType
    def set_ZoneType(self, ZoneType): self.ZoneType = ZoneType
    def validate_ZoneType(self, value):
        # Validate type ZoneType, a restriction on xsd:string.
        pass
    def get_ZoneName(self): return self.ZoneName
    def set_ZoneName(self, ZoneName): self.ZoneName = ZoneName
    def validate_ZoneName(self, value):
        # validate type ZoneName
        pass
    def export(self, outfile, level, namespace_='', name_='AirportZone', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='AirportZone')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='AirportZone'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AirportZone'):
        if self.ZoneType is not None:
            showIndent(outfile, level)
            outfile.write('<%sZoneType>%s</%sZoneType>\n' % (namespace_, self.format_string(quote_xml(self.ZoneType).encode(ExternalEncoding), input_name='ZoneType'), namespace_))
        if self.ZoneName is not None:
            showIndent(outfile, level)
            outfile.write('<%sZoneName>%s</%sZoneName>\n' % (namespace_, self.format_string(quote_xml(self.ZoneName).encode(ExternalEncoding), input_name='ZoneName'), namespace_))
    def hasContent_(self):
        if (
            self.ZoneType is not None or
            self.ZoneName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AirportZone'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ZoneType=%s,\n' % quote_python(self.ZoneType).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ZoneName=%s,\n' % quote_python(self.ZoneName).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ZoneType':
            ZoneType_ = ''
            for text__content_ in child_.childNodes:
                ZoneType_ += text__content_.nodeValue
            self.ZoneType = ZoneType_
            self.validate_ZoneType(self.ZoneType)    # validate type ZoneType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ZoneName':
            ZoneName_ = ''
            for text__content_ in child_.childNodes:
                ZoneName_ += text__content_.nodeValue
            self.ZoneName = ZoneName_
            self.validate_ZoneName(self.ZoneName)    # validate type ZoneName
# end class AirportZone


class AircraftWeight(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WeightClass=None, AircraftWeight=None):
        self.WeightClass = WeightClass
        self.AircraftWeight = AircraftWeight
    def factory(*args_, **kwargs_):
        if AircraftWeight.subclass:
            return AircraftWeight.subclass(*args_, **kwargs_)
        else:
            return AircraftWeight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WeightClass(self): return self.WeightClass
    def set_WeightClass(self, WeightClass): self.WeightClass = WeightClass
    def validate_WeightClass(self, value):
        # validate type WeightClass
        pass
    def get_AircraftWeight(self): return self.AircraftWeight
    def set_AircraftWeight(self, AircraftWeight): self.AircraftWeight = AircraftWeight
    def export(self, outfile, level, namespace_='', name_='AircraftWeight', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='AircraftWeight')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='AircraftWeight'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AircraftWeight'):
        if self.WeightClass is not None:
            showIndent(outfile, level)
            outfile.write('<%sWeightClass>%s</%sWeightClass>\n' % (namespace_, self.format_string(quote_xml(self.WeightClass).encode(ExternalEncoding), input_name='WeightClass'), namespace_))
        if self.AircraftWeight is not None:
            showIndent(outfile, level)
            outfile.write('<%sAircraftWeight>%s</%sAircraftWeight>\n' % (namespace_, self.format_integer(self.AircraftWeight, input_name='AircraftWeight'), namespace_))
    def hasContent_(self):
        if (
            self.WeightClass is not None or
            self.AircraftWeight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AircraftWeight'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('WeightClass=%s,\n' % quote_python(self.WeightClass).encode(ExternalEncoding))
        if self.AircraftWeight:
            showIndent(outfile, level)
            outfile.write('AircraftWeight=model_.WeightData(\n')
            self.AircraftWeight.exportLiteral(outfile, level, name_='AircraftWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'WeightClass':
            WeightClass_ = ''
            for text__content_ in child_.childNodes:
                WeightClass_ += text__content_.nodeValue
            self.WeightClass = WeightClass_
            self.validate_WeightClass(self.WeightClass)    # validate type WeightClass
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'AircraftWeight':
            obj_ = AircraftWeight.factory()
            obj_.build(child_)
            self.set_AircraftWeight(obj_)
# end class AircraftWeight


class BagClaimInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BagClaimHall=None, BagClaimName=None, BagClaimStatus=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, EndTime=None, SupplementalTime=None):
        self.BagClaimHall = BagClaimHall
        self.BagClaimName = BagClaimName
        self.BagClaimStatus = BagClaimStatus
        self.SchedBegin = SchedBegin
        self.SchedEnd = SchedEnd
        self.ActualBegin = ActualBegin
        self.ActualEnd = ActualEnd
        self.EndTime = EndTime
        self.SupplementalTime = SupplementalTime
    def factory(*args_, **kwargs_):
        if BagClaimInfo.subclass:
            return BagClaimInfo.subclass(*args_, **kwargs_)
        else:
            return BagClaimInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BagClaimHall(self): return self.BagClaimHall
    def set_BagClaimHall(self, BagClaimHall): self.BagClaimHall = BagClaimHall
    def validate_BagClaimHall(self, value):
        # Validate type BagClaimHall, a restriction on xsd:string.
        pass
    def get_BagClaimName(self): return self.BagClaimName
    def set_BagClaimName(self, BagClaimName): self.BagClaimName = BagClaimName
    def get_BagClaimStatus(self): return self.BagClaimStatus
    def set_BagClaimStatus(self, BagClaimStatus): self.BagClaimStatus = BagClaimStatus
    def validate_BagClaimStatus(self, value):
        # Validate type BagClaimStatus, a restriction on xsd:string.
        pass
    def get_SchedBegin(self): return self.SchedBegin
    def set_SchedBegin(self, SchedBegin): self.SchedBegin = SchedBegin
    def validate_SchedBegin(self, value):
        # validate type SchedBegin
        pass
    def get_SchedEnd(self): return self.SchedEnd
    def set_SchedEnd(self, SchedEnd): self.SchedEnd = SchedEnd
    def validate_SchedEnd(self, value):
        # validate type SchedEnd
        pass
    def get_ActualBegin(self): return self.ActualBegin
    def set_ActualBegin(self, ActualBegin): self.ActualBegin = ActualBegin
    def validate_ActualBegin(self, value):
        # validate type ActualBegin
        pass
    def get_ActualEnd(self): return self.ActualEnd
    def set_ActualEnd(self, ActualEnd): self.ActualEnd = ActualEnd
    def validate_ActualEnd(self, value):
        # validate type ActualEnd
        pass
    def get_EndTime(self): return self.EndTime
    def set_EndTime(self, EndTime): self.EndTime = EndTime
    def validate_EndTime(self, value):
        # validate type EndTime
        pass
    def get_SupplementalTime(self): return self.SupplementalTime
    def set_SupplementalTime(self, SupplementalTime): self.SupplementalTime = SupplementalTime
    def validate_SupplementalTime(self, value):
        # validate type SupplementalTime
        pass
    def export(self, outfile, level, namespace_='', name_='BagClaimInfo', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='BagClaimInfo')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='BagClaimInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BagClaimInfo'):
        if self.BagClaimHall is not None:
            showIndent(outfile, level)
            outfile.write('<%sBagClaimHall>%s</%sBagClaimHall>\n' % (namespace_, self.format_string(quote_xml(self.BagClaimHall).encode(ExternalEncoding), input_name='BagClaimHall'), namespace_))
        if self.BagClaimName is not None:
            showIndent(outfile, level)
            outfile.write('<%sBagClaimName>%s</%sBagClaimName>\n' % (namespace_, self.format_integer(self.BagClaimName, input_name='BagClaimName'), namespace_))
        if self.BagClaimStatus is not None:
            showIndent(outfile, level)
            outfile.write('<%sBagClaimStatus>%s</%sBagClaimStatus>\n' % (namespace_, self.format_string(quote_xml(self.BagClaimStatus).encode(ExternalEncoding), input_name='BagClaimStatus'), namespace_))
        if self.SchedBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedBegin>%s</%sSchedBegin>\n' % (namespace_, self.format_string(quote_xml(self.SchedBegin).encode(ExternalEncoding), input_name='SchedBegin'), namespace_))
        if self.SchedEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedEnd>%s</%sSchedEnd>\n' % (namespace_, self.format_string(quote_xml(self.SchedEnd).encode(ExternalEncoding), input_name='SchedEnd'), namespace_))
        if self.ActualBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualBegin>%s</%sActualBegin>\n' % (namespace_, self.format_string(quote_xml(self.ActualBegin).encode(ExternalEncoding), input_name='ActualBegin'), namespace_))
        if self.ActualEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualEnd>%s</%sActualEnd>\n' % (namespace_, self.format_string(quote_xml(self.ActualEnd).encode(ExternalEncoding), input_name='ActualEnd'), namespace_))
        if self.EndTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sEndTime>%s</%sEndTime>\n' % (namespace_, self.format_string(quote_xml(self.EndTime).encode(ExternalEncoding), input_name='EndTime'), namespace_))
        if self.SupplementalTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sSupplementalTime>%s</%sSupplementalTime>\n' % (namespace_, self.format_string(quote_xml(self.SupplementalTime).encode(ExternalEncoding), input_name='SupplementalTime'), namespace_))
    def hasContent_(self):
        if (
            self.BagClaimHall is not None or
            self.BagClaimName is not None or
            self.BagClaimStatus is not None or
            self.SchedBegin is not None or
            self.SchedEnd is not None or
            self.ActualBegin is not None or
            self.ActualEnd is not None or
            self.EndTime is not None or
            self.SupplementalTime is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BagClaimInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('BagClaimHall=%s,\n' % quote_python(self.BagClaimHall).encode(ExternalEncoding))
        if self.BagClaimName:
            showIndent(outfile, level)
            outfile.write('BagClaimName=model_.BagClaimName(\n')
            self.BagClaimName.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('BagClaimStatus=%s,\n' % quote_python(self.BagClaimStatus).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedBegin=%s,\n' % quote_python(self.SchedBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedEnd=%s,\n' % quote_python(self.SchedEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualBegin=%s,\n' % quote_python(self.ActualBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualEnd=%s,\n' % quote_python(self.ActualEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('EndTime=%s,\n' % quote_python(self.EndTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SupplementalTime=%s,\n' % quote_python(self.SupplementalTime).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BagClaimHall':
            BagClaimHall_ = ''
            for text__content_ in child_.childNodes:
                BagClaimHall_ += text__content_.nodeValue
            self.BagClaimHall = BagClaimHall_
            self.validate_BagClaimHall(self.BagClaimHall)    # validate type BagClaimHall
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BagClaimName':
            self.set_BagClaimName(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BagClaimStatus':
            BagClaimStatus_ = ''
            for text__content_ in child_.childNodes:
                BagClaimStatus_ += text__content_.nodeValue
            self.BagClaimStatus = BagClaimStatus_
            self.validate_BagClaimStatus(self.BagClaimStatus)    # validate type BagClaimStatus
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedBegin':
            SchedBegin_ = ''
            for text__content_ in child_.childNodes:
                SchedBegin_ += text__content_.nodeValue
            self.SchedBegin = SchedBegin_
            self.validate_SchedBegin(self.SchedBegin)    # validate type SchedBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedEnd':
            SchedEnd_ = ''
            for text__content_ in child_.childNodes:
                SchedEnd_ += text__content_.nodeValue
            self.SchedEnd = SchedEnd_
            self.validate_SchedEnd(self.SchedEnd)    # validate type SchedEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualBegin':
            ActualBegin_ = ''
            for text__content_ in child_.childNodes:
                ActualBegin_ += text__content_.nodeValue
            self.ActualBegin = ActualBegin_
            self.validate_ActualBegin(self.ActualBegin)    # validate type ActualBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualEnd':
            ActualEnd_ = ''
            for text__content_ in child_.childNodes:
                ActualEnd_ += text__content_.nodeValue
            self.ActualEnd = ActualEnd_
            self.validate_ActualEnd(self.ActualEnd)    # validate type ActualEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'EndTime':
            EndTime_ = ''
            for text__content_ in child_.childNodes:
                EndTime_ += text__content_.nodeValue
            self.EndTime = EndTime_
            self.validate_EndTime(self.EndTime)    # validate type EndTime
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SupplementalTime':
            SupplementalTime_ = ''
            for text__content_ in child_.childNodes:
                SupplementalTime_ += text__content_.nodeValue
            self.SupplementalTime = SupplementalTime_
            self.validate_SupplementalTime(self.SupplementalTime)    # validate type SupplementalTime
# end class BagClaimInfo


class BagClaimName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BagClaimHall=None, BagClaimName=None, BagClaimStatus=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, EndTime=None, SupplementalTime=None, elementIndex=None):
        pass
    def factory(*args_, **kwargs_):
        if BagClaimName.subclass:
            return BagClaimName.subclass(*args_, **kwargs_)
        else:
            return BagClaimName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='BagClaimName', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='BagClaimName')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="BagClaimName"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='BagClaimName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BagClaimName'):
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BagClaimName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
# end class BagClaimName


class GateInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GateName=None, DisplayText=None, DisplayObject=None, GateStatus=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, SupplementalTime=None):
        self.GateName = GateName
        self.DisplayText = DisplayText
        self.DisplayObject = DisplayObject
        self.GateStatus = GateStatus
        self.SchedBegin = SchedBegin
        self.SchedEnd = SchedEnd
        self.ActualBegin = ActualBegin
        self.ActualEnd = ActualEnd
        self.SupplementalTime = SupplementalTime
    def factory(*args_, **kwargs_):
        if GateInfo.subclass:
            return GateInfo.subclass(*args_, **kwargs_)
        else:
            return GateInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GateName(self): return self.GateName
    def set_GateName(self, GateName): self.GateName = GateName
    def get_DisplayText(self): return self.DisplayText
    def set_DisplayText(self, DisplayText): self.DisplayText = DisplayText
    def get_DisplayObject(self): return self.DisplayObject
    def set_DisplayObject(self, DisplayObject): self.DisplayObject = DisplayObject
    def get_GateStatus(self): return self.GateStatus
    def set_GateStatus(self, GateStatus): self.GateStatus = GateStatus
    def validate_GateStatus(self, value):
        # Validate type GateStatus, a restriction on xsd:string.
        pass
    def get_SchedBegin(self): return self.SchedBegin
    def set_SchedBegin(self, SchedBegin): self.SchedBegin = SchedBegin
    def validate_SchedBegin(self, value):
        # validate type SchedBegin
        pass
    def get_SchedEnd(self): return self.SchedEnd
    def set_SchedEnd(self, SchedEnd): self.SchedEnd = SchedEnd
    def validate_SchedEnd(self, value):
        # validate type SchedEnd
        pass
    def get_ActualBegin(self): return self.ActualBegin
    def set_ActualBegin(self, ActualBegin): self.ActualBegin = ActualBegin
    def validate_ActualBegin(self, value):
        # validate type ActualBegin
        pass
    def get_ActualEnd(self): return self.ActualEnd
    def set_ActualEnd(self, ActualEnd): self.ActualEnd = ActualEnd
    def validate_ActualEnd(self, value):
        # validate type ActualEnd
        pass
    def get_SupplementalTime(self): return self.SupplementalTime
    def set_SupplementalTime(self, SupplementalTime): self.SupplementalTime = SupplementalTime
    def validate_SupplementalTime(self, value):
        # validate type SupplementalTime
        pass
    def export(self, outfile, level, namespace_='', name_='GateInfo', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='GateInfo')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='GateInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='GateInfo'):
        if self.GateName is not None:
            showIndent(outfile, level)
            outfile.write('<%sGateName>%s</%sGateName>\n' % (namespace_, self.format_integer(self.GateName, input_name='GateName'), namespace_))
        if self.DisplayText is not None:
            showIndent(outfile, level)
            outfile.write('<%sDisplayText>%s</%sDisplayText>\n' % (namespace_, self.format_integer(self.DisplayText, input_name='DisplayText'), namespace_))
        if self.DisplayObject is not None:
            showIndent(outfile, level)
            outfile.write('<%sDisplayObject>%s</%sDisplayObject>\n' % (namespace_, self.format_integer(self.DisplayObject, input_name='DisplayObject'), namespace_))
        if self.GateStatus is not None:
            showIndent(outfile, level)
            outfile.write('<%sGateStatus>%s</%sGateStatus>\n' % (namespace_, self.format_string(quote_xml(self.GateStatus).encode(ExternalEncoding), input_name='GateStatus'), namespace_))
        if self.SchedBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedBegin>%s</%sSchedBegin>\n' % (namespace_, self.format_string(quote_xml(self.SchedBegin).encode(ExternalEncoding), input_name='SchedBegin'), namespace_))
        if self.SchedEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedEnd>%s</%sSchedEnd>\n' % (namespace_, self.format_string(quote_xml(self.SchedEnd).encode(ExternalEncoding), input_name='SchedEnd'), namespace_))
        if self.ActualBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualBegin>%s</%sActualBegin>\n' % (namespace_, self.format_string(quote_xml(self.ActualBegin).encode(ExternalEncoding), input_name='ActualBegin'), namespace_))
        if self.ActualEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualEnd>%s</%sActualEnd>\n' % (namespace_, self.format_string(quote_xml(self.ActualEnd).encode(ExternalEncoding), input_name='ActualEnd'), namespace_))
        if self.SupplementalTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sSupplementalTime>%s</%sSupplementalTime>\n' % (namespace_, self.format_string(quote_xml(self.SupplementalTime).encode(ExternalEncoding), input_name='SupplementalTime'), namespace_))
    def hasContent_(self):
        if (
            self.GateName is not None or
            self.DisplayText is not None or
            self.DisplayObject is not None or
            self.GateStatus is not None or
            self.SchedBegin is not None or
            self.SchedEnd is not None or
            self.ActualBegin is not None or
            self.ActualEnd is not None or
            self.SupplementalTime is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GateInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.GateName:
            showIndent(outfile, level)
            outfile.write('GateName=model_.GateName(\n')
            self.GateName.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DisplayText:
            showIndent(outfile, level)
            outfile.write('DisplayText=model_.DisplayText(\n')
            self.DisplayText.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DisplayObject:
            showIndent(outfile, level)
            outfile.write('DisplayObject=model_.DisplayObject(\n')
            self.DisplayObject.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('GateStatus=%s,\n' % quote_python(self.GateStatus).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedBegin=%s,\n' % quote_python(self.SchedBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedEnd=%s,\n' % quote_python(self.SchedEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualBegin=%s,\n' % quote_python(self.ActualBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualEnd=%s,\n' % quote_python(self.ActualEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SupplementalTime=%s,\n' % quote_python(self.SupplementalTime).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'GateName':
            self.set_GateName(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DisplayText':
            obj_ = DisplayText.factory()
            obj_.build(child_)
            self.set_DisplayText(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DisplayObject':
            obj_ = DisplayObject.factory()
            obj_.build(child_)
            self.set_DisplayObject(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'GateStatus':
            GateStatus_ = ''
            for text__content_ in child_.childNodes:
                GateStatus_ += text__content_.nodeValue
            self.GateStatus = GateStatus_
            self.validate_GateStatus(self.GateStatus)    # validate type GateStatus
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedBegin':
            SchedBegin_ = ''
            for text__content_ in child_.childNodes:
                SchedBegin_ += text__content_.nodeValue
            self.SchedBegin = SchedBegin_
            self.validate_SchedBegin(self.SchedBegin)    # validate type SchedBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedEnd':
            SchedEnd_ = ''
            for text__content_ in child_.childNodes:
                SchedEnd_ += text__content_.nodeValue
            self.SchedEnd = SchedEnd_
            self.validate_SchedEnd(self.SchedEnd)    # validate type SchedEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualBegin':
            ActualBegin_ = ''
            for text__content_ in child_.childNodes:
                ActualBegin_ += text__content_.nodeValue
            self.ActualBegin = ActualBegin_
            self.validate_ActualBegin(self.ActualBegin)    # validate type ActualBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualEnd':
            ActualEnd_ = ''
            for text__content_ in child_.childNodes:
                ActualEnd_ += text__content_.nodeValue
            self.ActualEnd = ActualEnd_
            self.validate_ActualEnd(self.ActualEnd)    # validate type ActualEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SupplementalTime':
            SupplementalTime_ = ''
            for text__content_ in child_.childNodes:
                SupplementalTime_ += text__content_.nodeValue
            self.SupplementalTime = SupplementalTime_
            self.validate_SupplementalTime(self.SupplementalTime)    # validate type SupplementalTime
# end class GateInfo


class GateName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if GateName.subclass:
            return GateName.subclass(*args_, **kwargs_)
        else:
            return GateName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='GateName', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='GateName')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='GateName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='GateName'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GateName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class GateName


class BaggageMakeUpBeltInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BaggageMakeUpBelt=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, SupplementalTime=None):
        self.BaggageMakeUpBelt = BaggageMakeUpBelt
        self.SchedBegin = SchedBegin
        self.SchedEnd = SchedEnd
        self.ActualBegin = ActualBegin
        self.ActualEnd = ActualEnd
        self.SupplementalTime = SupplementalTime
    def factory(*args_, **kwargs_):
        if BaggageMakeUpBeltInfo.subclass:
            return BaggageMakeUpBeltInfo.subclass(*args_, **kwargs_)
        else:
            return BaggageMakeUpBeltInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BaggageMakeUpBelt(self): return self.BaggageMakeUpBelt
    def set_BaggageMakeUpBelt(self, BaggageMakeUpBelt): self.BaggageMakeUpBelt = BaggageMakeUpBelt
    def get_SchedBegin(self): return self.SchedBegin
    def set_SchedBegin(self, SchedBegin): self.SchedBegin = SchedBegin
    def validate_SchedBegin(self, value):
        # validate type SchedBegin
        pass
    def get_SchedEnd(self): return self.SchedEnd
    def set_SchedEnd(self, SchedEnd): self.SchedEnd = SchedEnd
    def validate_SchedEnd(self, value):
        # validate type SchedEnd
        pass
    def get_ActualBegin(self): return self.ActualBegin
    def set_ActualBegin(self, ActualBegin): self.ActualBegin = ActualBegin
    def validate_ActualBegin(self, value):
        # validate type ActualBegin
        pass
    def get_ActualEnd(self): return self.ActualEnd
    def set_ActualEnd(self, ActualEnd): self.ActualEnd = ActualEnd
    def validate_ActualEnd(self, value):
        # validate type ActualEnd
        pass
    def get_SupplementalTime(self): return self.SupplementalTime
    def set_SupplementalTime(self, SupplementalTime): self.SupplementalTime = SupplementalTime
    def validate_SupplementalTime(self, value):
        # validate type SupplementalTime
        pass
    def export(self, outfile, level, namespace_='', name_='BaggageMakeUpBeltInfo', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='BaggageMakeUpBeltInfo')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='BaggageMakeUpBeltInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BaggageMakeUpBeltInfo'):
        if self.BaggageMakeUpBelt is not None:
            showIndent(outfile, level)
            outfile.write('<%sBaggageMakeUpBelt>%s</%sBaggageMakeUpBelt>\n' % (namespace_, self.format_integer(self.BaggageMakeUpBelt, input_name='BaggageMakeUpBelt'), namespace_))
        if self.SchedBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedBegin>%s</%sSchedBegin>\n' % (namespace_, self.format_string(quote_xml(self.SchedBegin).encode(ExternalEncoding), input_name='SchedBegin'), namespace_))
        if self.SchedEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedEnd>%s</%sSchedEnd>\n' % (namespace_, self.format_string(quote_xml(self.SchedEnd).encode(ExternalEncoding), input_name='SchedEnd'), namespace_))
        if self.ActualBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualBegin>%s</%sActualBegin>\n' % (namespace_, self.format_string(quote_xml(self.ActualBegin).encode(ExternalEncoding), input_name='ActualBegin'), namespace_))
        if self.ActualEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualEnd>%s</%sActualEnd>\n' % (namespace_, self.format_string(quote_xml(self.ActualEnd).encode(ExternalEncoding), input_name='ActualEnd'), namespace_))
        if self.SupplementalTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sSupplementalTime>%s</%sSupplementalTime>\n' % (namespace_, self.format_string(quote_xml(self.SupplementalTime).encode(ExternalEncoding), input_name='SupplementalTime'), namespace_))
    def hasContent_(self):
        if (
            self.BaggageMakeUpBelt is not None or
            self.SchedBegin is not None or
            self.SchedEnd is not None or
            self.ActualBegin is not None or
            self.ActualEnd is not None or
            self.SupplementalTime is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BaggageMakeUpBeltInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('BaggageMakeUpBelt=%s,\n' % quote_python(self.BaggageMakeUpBelt).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedBegin=%s,\n' % quote_python(self.SchedBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedEnd=%s,\n' % quote_python(self.SchedEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualBegin=%s,\n' % quote_python(self.ActualBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualEnd=%s,\n' % quote_python(self.ActualEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SupplementalTime=%s,\n' % quote_python(self.SupplementalTime).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BaggageMakeUpBelt':
            BaggageMakeUpBelt_ = ''
            for text__content_ in child_.childNodes:
                BaggageMakeUpBelt_ += text__content_.nodeValue
            self.BaggageMakeUpBelt = BaggageMakeUpBelt_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedBegin':
            SchedBegin_ = ''
            for text__content_ in child_.childNodes:
                SchedBegin_ += text__content_.nodeValue
            self.SchedBegin = SchedBegin_
            self.validate_SchedBegin(self.SchedBegin)    # validate type SchedBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedEnd':
            SchedEnd_ = ''
            for text__content_ in child_.childNodes:
                SchedEnd_ += text__content_.nodeValue
            self.SchedEnd = SchedEnd_
            self.validate_SchedEnd(self.SchedEnd)    # validate type SchedEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualBegin':
            ActualBegin_ = ''
            for text__content_ in child_.childNodes:
                ActualBegin_ += text__content_.nodeValue
            self.ActualBegin = ActualBegin_
            self.validate_ActualBegin(self.ActualBegin)    # validate type ActualBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualEnd':
            ActualEnd_ = ''
            for text__content_ in child_.childNodes:
                ActualEnd_ += text__content_.nodeValue
            self.ActualEnd = ActualEnd_
            self.validate_ActualEnd(self.ActualEnd)    # validate type ActualEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SupplementalTime':
            SupplementalTime_ = ''
            for text__content_ in child_.childNodes:
                SupplementalTime_ += text__content_.nodeValue
            self.SupplementalTime = SupplementalTime_
            self.validate_SupplementalTime(self.SupplementalTime)    # validate type SupplementalTime
# end class BaggageMakeUpBeltInfo


class BaggageMakeUpBelt(GeneratedsSuper):
    subclass = None
    superclass = BaggageMakeUpBelt
    def __init__(self, valueOf_=''):
        BaggageMakeUpBelt.__init__(self)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if BaggageMakeUpBelt.subclass:
            return BaggageMakeUpBelt.subclass(*args_, **kwargs_)
        else:
            return BaggageMakeUpBelt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='BaggageMakeUpBelt', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='BaggageMakeUpBelt')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="BaggageMakeUpBelt"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='BaggageMakeUpBelt'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BaggageMakeUpBelt'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BaggageMakeUpBelt'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class BaggageMakeUpBelt


class StandInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AircraftStand=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, SupplementalTime=None):
        self.AircraftStand = AircraftStand
        self.SchedBegin = SchedBegin
        self.SchedEnd = SchedEnd
        self.ActualBegin = ActualBegin
        self.ActualEnd = ActualEnd
        self.SupplementalTime = SupplementalTime
    def factory(*args_, **kwargs_):
        if StandInfo.subclass:
            return StandInfo.subclass(*args_, **kwargs_)
        else:
            return StandInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AircraftStand(self): return self.AircraftStand
    def set_AircraftStand(self, AircraftStand): self.AircraftStand = AircraftStand
    def get_SchedBegin(self): return self.SchedBegin
    def set_SchedBegin(self, SchedBegin): self.SchedBegin = SchedBegin
    def validate_SchedBegin(self, value):
        # validate type SchedBegin
        pass
    def get_SchedEnd(self): return self.SchedEnd
    def set_SchedEnd(self, SchedEnd): self.SchedEnd = SchedEnd
    def validate_SchedEnd(self, value):
        # validate type SchedEnd
        pass
    def get_ActualBegin(self): return self.ActualBegin
    def set_ActualBegin(self, ActualBegin): self.ActualBegin = ActualBegin
    def validate_ActualBegin(self, value):
        # validate type ActualBegin
        pass
    def get_ActualEnd(self): return self.ActualEnd
    def set_ActualEnd(self, ActualEnd): self.ActualEnd = ActualEnd
    def validate_ActualEnd(self, value):
        # validate type ActualEnd
        pass
    def get_SupplementalTime(self): return self.SupplementalTime
    def set_SupplementalTime(self, SupplementalTime): self.SupplementalTime = SupplementalTime
    def validate_SupplementalTime(self, value):
        # validate type SupplementalTime
        pass
    def export(self, outfile, level, namespace_='', name_='StandInfo', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='StandInfo')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='StandInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StandInfo'):
        if self.AircraftStand is not None:
            showIndent(outfile, level)
            outfile.write('<%sAircraftStand>%s</%sAircraftStand>\n' % (namespace_, self.format_integer(self.AircraftStand, input_name='AircraftStand'), namespace_))
        if self.SchedBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedBegin>%s</%sSchedBegin>\n' % (namespace_, self.format_string(quote_xml(self.SchedBegin).encode(ExternalEncoding), input_name='SchedBegin'), namespace_))
        if self.SchedEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedEnd>%s</%sSchedEnd>\n' % (namespace_, self.format_string(quote_xml(self.SchedEnd).encode(ExternalEncoding), input_name='SchedEnd'), namespace_))
        if self.ActualBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualBegin>%s</%sActualBegin>\n' % (namespace_, self.format_string(quote_xml(self.ActualBegin).encode(ExternalEncoding), input_name='ActualBegin'), namespace_))
        if self.ActualEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualEnd>%s</%sActualEnd>\n' % (namespace_, self.format_string(quote_xml(self.ActualEnd).encode(ExternalEncoding), input_name='ActualEnd'), namespace_))
        if self.SupplementalTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sSupplementalTime>%s</%sSupplementalTime>\n' % (namespace_, self.format_string(quote_xml(self.SupplementalTime).encode(ExternalEncoding), input_name='SupplementalTime'), namespace_))
    def hasContent_(self):
        if (
            self.AircraftStand is not None or
            self.SchedBegin is not None or
            self.SchedEnd is not None or
            self.ActualBegin is not None or
            self.ActualEnd is not None or
            self.SupplementalTime is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='StandInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('AircraftStand=%s,\n' % quote_python(self.AircraftStand).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedBegin=%s,\n' % quote_python(self.SchedBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedEnd=%s,\n' % quote_python(self.SchedEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualBegin=%s,\n' % quote_python(self.ActualBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualEnd=%s,\n' % quote_python(self.ActualEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SupplementalTime=%s,\n' % quote_python(self.SupplementalTime).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'AircraftStand':
            AircraftStand_ = ''
            for text__content_ in child_.childNodes:
                AircraftStand_ += text__content_.nodeValue
            self.AircraftStand = AircraftStand_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedBegin':
            SchedBegin_ = ''
            for text__content_ in child_.childNodes:
                SchedBegin_ += text__content_.nodeValue
            self.SchedBegin = SchedBegin_
            self.validate_SchedBegin(self.SchedBegin)    # validate type SchedBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedEnd':
            SchedEnd_ = ''
            for text__content_ in child_.childNodes:
                SchedEnd_ += text__content_.nodeValue
            self.SchedEnd = SchedEnd_
            self.validate_SchedEnd(self.SchedEnd)    # validate type SchedEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualBegin':
            ActualBegin_ = ''
            for text__content_ in child_.childNodes:
                ActualBegin_ += text__content_.nodeValue
            self.ActualBegin = ActualBegin_
            self.validate_ActualBegin(self.ActualBegin)    # validate type ActualBegin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualEnd':
            ActualEnd_ = ''
            for text__content_ in child_.childNodes:
                ActualEnd_ += text__content_.nodeValue
            self.ActualEnd = ActualEnd_
            self.validate_ActualEnd(self.ActualEnd)    # validate type ActualEnd
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SupplementalTime':
            SupplementalTime_ = ''
            for text__content_ in child_.childNodes:
                SupplementalTime_ += text__content_.nodeValue
            self.SupplementalTime = SupplementalTime_
            self.validate_SupplementalTime(self.SupplementalTime)    # validate type SupplementalTime
# end class StandInfo


class AircraftStand(GeneratedsSuper):
    subclass = None
    superclass = AircraftStand
    def __init__(self, valueOf_=''):
        AircraftStand.__init__(self)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if AircraftStand.subclass:
            return AircraftStand.subclass(*args_, **kwargs_)
        else:
            return AircraftStand(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='AircraftStand', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='AircraftStand')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="AircraftStand"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='AircraftStand'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AircraftStand'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AircraftStand'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class AircraftStand


class CounterAllocation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FlightID=None, Carrier=None, Counter=None):
        self.FlightID = FlightID
        if Carrier is None:
            self.Carrier = []
        else:
            self.Carrier = Carrier
        if Counter is None:
            self.Counter = []
        else:
            self.Counter = Counter
    def factory(*args_, **kwargs_):
        if CounterAllocation.subclass:
            return CounterAllocation.subclass(*args_, **kwargs_)
        else:
            return CounterAllocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FlightID(self): return self.FlightID
    def set_FlightID(self, FlightID): self.FlightID = FlightID
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def add_Carrier(self, value): self.Carrier.append(value)
    def insert_Carrier(self, index, value): self.Carrier[index] = value
    def validate_Carrier(self, value):
        # validate type Carrier
        pass
    def get_Counter(self): return self.Counter
    def set_Counter(self, Counter): self.Counter = Counter
    def add_Counter(self, value): self.Counter.append(value)
    def insert_Counter(self, index, value): self.Counter[index] = value
    def export(self, outfile, level, namespace_='', name_='CounterAllocation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='CounterAllocation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='CounterAllocation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CounterAllocation'):
        if self.FlightID is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightID>%s</%sFlightID>\n' % (namespace_, self.format_integer(self.FlightID, input_name='FlightID'), namespace_))
        for Carrier_ in self.Carrier:
            showIndent(outfile, level)
            outfile.write('<%sCarrier>%s</%sCarrier>\n' % (namespace_, self.format_string(quote_xml(Carrier_).encode(ExternalEncoding), input_name='Carrier'), namespace_))
        for Counter_ in self.Counter:
            showIndent(outfile, level)
            outfile.write('<%sCounter>%s</%sCounter>\n' % (namespace_, self.format_integer(Counter_, input_name='Counter'), namespace_))
    def hasContent_(self):
        if (
            self.FlightID is not None or
            self.Carrier is not None or
            self.Counter is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CounterAllocation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FlightID:
            showIndent(outfile, level)
            outfile.write('FlightID=model_.FlightID(\n')
            self.FlightID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Carrier=[\n')
        level += 1
        for Carrier in self.Carrier:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Carrier).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Counter=[\n')
        level += 1
        for Counter in self.Counter:
            showIndent(outfile, level)
            outfile.write('model_.Counter(\n')
            Counter.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightID':
            obj_ = FlightID.factory()
            obj_.build(child_)
            self.set_FlightID(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Carrier':
            Carrier_ = ''
            for text__content_ in child_.childNodes:
                Carrier_ += text__content_.nodeValue
            self.Carrier.append(Carrier_)
            self.validate_Carrier(self.Carrier)    # validate type Carrier
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Counter':
            obj_ = Counter.factory()
            obj_.build(child_)
            self.Counter.append(obj_)
# end class CounterAllocation


class Counter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, elementIndex=None, CounterName=None, ServiceClass=None, DisplayText=None, DisplayObject=None, CheckInStatus=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, SupplementalTime=None):
        self.elementIndex = elementIndex
        self.CounterName = CounterName
        self.ServiceClass = ServiceClass
        self.DisplayText = DisplayText
        self.DisplayObject = DisplayObject
        self.CheckInStatus = CheckInStatus
        self.SchedBegin = SchedBegin
        self.SchedEnd = SchedEnd
        self.ActualBegin = ActualBegin
        self.ActualEnd = ActualEnd
        self.SupplementalTime = SupplementalTime
    def factory(*args_, **kwargs_):
        if Counter.subclass:
            return Counter.subclass(*args_, **kwargs_)
        else:
            return Counter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CounterName(self): return self.CounterName
    def set_CounterName(self, CounterName): self.CounterName = CounterName
    def validate_CounterName(self, value):
        # Validate type CounterName, a restriction on xsd:string.
        pass
    def get_ServiceClass(self): return self.ServiceClass
    def set_ServiceClass(self, ServiceClass): self.ServiceClass = ServiceClass
    def validate_ServiceClass(self, value):
        # validate type ServiceClass
        pass
    def get_DisplayText(self): return self.DisplayText
    def set_DisplayText(self, DisplayText): self.DisplayText = DisplayText
    def get_DisplayObject(self): return self.DisplayObject
    def set_DisplayObject(self, DisplayObject): self.DisplayObject = DisplayObject
    def get_CheckInStatus(self): return self.CheckInStatus
    def set_CheckInStatus(self, CheckInStatus): self.CheckInStatus = CheckInStatus
    def validate_CheckInStatus(self, value):
        # Validate type CheckInStatus, a restriction on xsd:string.
        pass
    def get_SchedBegin(self): return self.SchedBegin
    def set_SchedBegin(self, SchedBegin): self.SchedBegin = SchedBegin
    def get_SchedEnd(self): return self.SchedEnd
    def set_SchedEnd(self, SchedEnd): self.SchedEnd = SchedEnd
    def get_ActualBegin(self): return self.ActualBegin
    def set_ActualBegin(self, ActualBegin): self.ActualBegin = ActualBegin
    def get_ActualEnd(self): return self.ActualEnd
    def set_ActualEnd(self, ActualEnd): self.ActualEnd = ActualEnd
    def get_SupplementalTime(self): return self.SupplementalTime
    def set_SupplementalTime(self, SupplementalTime): self.SupplementalTime = SupplementalTime
    def validate_SupplementalTime(self, value):
        # validate type SupplementalTime
        pass
    def get_elementIndex(self): return self.elementIndex
    def set_elementIndex(self, elementIndex): self.elementIndex = elementIndex
    def export(self, outfile, level, namespace_='', name_='Counter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Counter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Counter'):
        outfile.write(' elementIndex=%s' % (self.format_string(quote_attrib(self.elementIndex).encode(ExternalEncoding), input_name='elementIndex'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='Counter'):
        if self.CounterName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCounterName>%s</%sCounterName>\n' % (namespace_, self.format_string(quote_xml(self.CounterName).encode(ExternalEncoding), input_name='CounterName'), namespace_))
        if self.ServiceClass is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceClass>%s</%sServiceClass>\n' % (namespace_, self.format_string(quote_xml(self.ServiceClass).encode(ExternalEncoding), input_name='ServiceClass'), namespace_))
        if self.DisplayText is not None:
            showIndent(outfile, level)
            outfile.write('<%sDisplayText>%s</%sDisplayText>\n' % (namespace_, self.format_integer(self.DisplayText, input_name='DisplayText'), namespace_))
        if self.DisplayObject is not None:
            showIndent(outfile, level)
            outfile.write('<%sDisplayObject>%s</%sDisplayObject>\n' % (namespace_, self.format_integer(self.DisplayObject, input_name='DisplayObject'), namespace_))
        if self.CheckInStatus is not None:
            showIndent(outfile, level)
            outfile.write('<%sCheckInStatus>%s</%sCheckInStatus>\n' % (namespace_, self.format_string(quote_xml(self.CheckInStatus).encode(ExternalEncoding), input_name='CheckInStatus'), namespace_))
        if self.SchedBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedBegin>%s</%sSchedBegin>\n' % (namespace_, self.format_integer(self.SchedBegin, input_name='SchedBegin'), namespace_))
        if self.SchedEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sSchedEnd>%s</%sSchedEnd>\n' % (namespace_, self.format_integer(self.SchedEnd, input_name='SchedEnd'), namespace_))
        if self.ActualBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualBegin>%s</%sActualBegin>\n' % (namespace_, self.format_integer(self.ActualBegin, input_name='ActualBegin'), namespace_))
        if self.ActualEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualEnd>%s</%sActualEnd>\n' % (namespace_, self.format_integer(self.ActualEnd, input_name='ActualEnd'), namespace_))
        if self.SupplementalTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sSupplementalTime>%s</%sSupplementalTime>\n' % (namespace_, self.format_string(quote_xml(self.SupplementalTime).encode(ExternalEncoding), input_name='SupplementalTime'), namespace_))
    def hasContent_(self):
        if (
            self.CounterName is not None or
            self.ServiceClass is not None or
            self.DisplayText is not None or
            self.DisplayObject is not None or
            self.CheckInStatus is not None or
            self.SchedBegin is not None or
            self.SchedEnd is not None or
            self.ActualBegin is not None or
            self.ActualEnd is not None or
            self.SupplementalTime is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Counter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.elementIndex is not None:
            showIndent(outfile, level)
            outfile.write('elementIndex = %s,\n' % (self.elementIndex,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('CounterName=%s,\n' % quote_python(self.CounterName).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ServiceClass=%s,\n' % quote_python(self.ServiceClass).encode(ExternalEncoding))
        if self.DisplayText:
            showIndent(outfile, level)
            outfile.write('DisplayText=model_.DisplayText(\n')
            self.DisplayText.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DisplayObject:
            showIndent(outfile, level)
            outfile.write('DisplayObject=model_.DisplayObject(\n')
            self.DisplayObject.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('CheckInStatus=%s,\n' % quote_python(self.CheckInStatus).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedBegin=%s,\n' % quote_python(self.SchedBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SchedEnd=%s,\n' % quote_python(self.SchedEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualBegin=%s,\n' % quote_python(self.ActualBegin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ActualEnd=%s,\n' % quote_python(self.ActualEnd).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SupplementalTime=%s,\n' % quote_python(self.SupplementalTime).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('elementIndex'):
            self.elementIndex = attrs.get('elementIndex').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'CounterName':
            CounterName_ = ''
            for text__content_ in child_.childNodes:
                CounterName_ += text__content_.nodeValue
            self.CounterName = CounterName_
            self.validate_CounterName(self.CounterName)    # validate type CounterName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ServiceClass':
            ServiceClass_ = ''
            for text__content_ in child_.childNodes:
                ServiceClass_ += text__content_.nodeValue
            self.ServiceClass = ServiceClass_
            self.validate_ServiceClass(self.ServiceClass)    # validate type ServiceClass
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DisplayText':
            obj_ = DisplayText.factory()
            obj_.build(child_)
            self.set_DisplayText(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'DisplayObject':
            obj_ = DisplayObject.factory()
            obj_.build(child_)
            self.set_DisplayObject(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'CheckInStatus':
            CheckInStatus_ = ''
            for text__content_ in child_.childNodes:
                CheckInStatus_ += text__content_.nodeValue
            self.CheckInStatus = CheckInStatus_
            self.validate_CheckInStatus(self.CheckInStatus)    # validate type CheckInStatus
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedBegin':
            SchedBegin_ = ''
            for text__content_ in child_.childNodes:
                SchedBegin_ += text__content_.nodeValue
            self.SchedBegin = SchedBegin_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SchedEnd':
            SchedEnd_ = ''
            for text__content_ in child_.childNodes:
                SchedEnd_ += text__content_.nodeValue
            self.SchedEnd = SchedEnd_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualBegin':
            ActualBegin_ = ''
            for text__content_ in child_.childNodes:
                ActualBegin_ += text__content_.nodeValue
            self.ActualBegin = ActualBegin_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ActualEnd':
            ActualEnd_ = ''
            for text__content_ in child_.childNodes:
                ActualEnd_ += text__content_.nodeValue
            self.ActualEnd = ActualEnd_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SupplementalTime':
            SupplementalTime_ = ''
            for text__content_ in child_.childNodes:
                SupplementalTime_ += text__content_.nodeValue
            self.SupplementalTime = SupplementalTime_
            self.validate_SupplementalTime(self.SupplementalTime)    # validate type SupplementalTime
# end class Counter


class Cargo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExpressCargo=None, MailCargo=None, TotalCargo=None, UnusualCargo=None):
        self.ExpressCargo = ExpressCargo
        self.MailCargo = MailCargo
        self.TotalCargo = TotalCargo
        if UnusualCargo is None:
            self.UnusualCargo = []
        else:
            self.UnusualCargo = UnusualCargo
    def factory(*args_, **kwargs_):
        if Cargo.subclass:
            return Cargo.subclass(*args_, **kwargs_)
        else:
            return Cargo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExpressCargo(self): return self.ExpressCargo
    def set_ExpressCargo(self, ExpressCargo): self.ExpressCargo = ExpressCargo
    def get_MailCargo(self): return self.MailCargo
    def set_MailCargo(self, MailCargo): self.MailCargo = MailCargo
    def get_TotalCargo(self): return self.TotalCargo
    def set_TotalCargo(self, TotalCargo): self.TotalCargo = TotalCargo
    def get_UnusualCargo(self): return self.UnusualCargo
    def set_UnusualCargo(self, UnusualCargo): self.UnusualCargo = UnusualCargo
    def add_UnusualCargo(self, value): self.UnusualCargo.append(value)
    def insert_UnusualCargo(self, index, value): self.UnusualCargo[index] = value
    def export(self, outfile, level, namespace_='', name_='Cargo', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Cargo')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Cargo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Cargo'):
        if self.ExpressCargo is not None:
            showIndent(outfile, level)
            outfile.write('<%sExpressCargo>%s</%sExpressCargo>\n' % (namespace_, self.format_integer(self.ExpressCargo, input_name='ExpressCargo'), namespace_))
        if self.MailCargo is not None:
            showIndent(outfile, level)
            outfile.write('<%sMailCargo>%s</%sMailCargo>\n' % (namespace_, self.format_integer(self.MailCargo, input_name='MailCargo'), namespace_))
        if self.TotalCargo is not None:
            showIndent(outfile, level)
            outfile.write('<%sTotalCargo>%s</%sTotalCargo>\n' % (namespace_, self.format_integer(self.TotalCargo, input_name='TotalCargo'), namespace_))
        for UnusualCargo_ in self.UnusualCargo:
            showIndent(outfile, level)
            outfile.write('<%sUnusualCargo>%s</%sUnusualCargo>\n' % (namespace_, self.format_integer(UnusualCargo_, input_name='UnusualCargo'), namespace_))
    def hasContent_(self):
        if (
            self.ExpressCargo is not None or
            self.MailCargo is not None or
            self.TotalCargo is not None or
            self.UnusualCargo is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Cargo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ExpressCargo:
            showIndent(outfile, level)
            outfile.write('ExpressCargo=model_.CargoData(\n')
            self.ExpressCargo.exportLiteral(outfile, level, name_='ExpressCargo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.MailCargo:
            showIndent(outfile, level)
            outfile.write('MailCargo=model_.CargoData(\n')
            self.MailCargo.exportLiteral(outfile, level, name_='MailCargo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TotalCargo:
            showIndent(outfile, level)
            outfile.write('TotalCargo=model_.CargoData(\n')
            self.TotalCargo.exportLiteral(outfile, level, name_='TotalCargo')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('UnusualCargo=[\n')
        level += 1
        for UnusualCargo in self.UnusualCargo:
            showIndent(outfile, level)
            outfile.write('model_.UnusualCargo(\n')
            UnusualCargo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ExpressCargo':
            obj_ = CargoData.factory()
            obj_.build(child_)
            self.set_ExpressCargo(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MailCargo':
            obj_ = CargoData.factory()
            obj_.build(child_)
            self.set_MailCargo(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'TotalCargo':
            obj_ = CargoData.factory()
            obj_.build(child_)
            self.set_TotalCargo(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'UnusualCargo':
            type_name = child_.attributes.getNamedItemNS(
                'http://www.w3.org/2001/XMLSchema-instance', 'type')
            if type_name is not None:
                class_ = globals()[type_name.value]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <UnusualCargo> element')
            self.UnusualCargo.append(obj_)
# end class Cargo


class UnusualCargoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if UnusualCargoType.subclass:
            return UnusualCargoType.subclass(*args_, **kwargs_)
        else:
            return UnusualCargoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='UnusualCargoType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='UnusualCargoType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='UnusualCargoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='UnusualCargoType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UnusualCargoType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class UnusualCargoType


class CargoData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pieces=None, CargoWeight=None):
        self.Pieces = Pieces
        self.CargoWeight = CargoWeight
    def factory(*args_, **kwargs_):
        if CargoData.subclass:
            return CargoData.subclass(*args_, **kwargs_)
        else:
            return CargoData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Pieces(self): return self.Pieces
    def set_Pieces(self, Pieces): self.Pieces = Pieces
    def validate_Pieces(self, value):
        # validate type Pieces
        pass
    def get_CargoWeight(self): return self.CargoWeight
    def set_CargoWeight(self, CargoWeight): self.CargoWeight = CargoWeight
    def export(self, outfile, level, namespace_='', name_='CargoData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='CargoData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='CargoData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CargoData'):
        if self.Pieces is not None:
            showIndent(outfile, level)
            outfile.write('<%sPieces>%s</%sPieces>\n' % (namespace_, self.format_integer(self.Pieces, input_name='Pieces'), namespace_))
        if self.CargoWeight is not None:
            showIndent(outfile, level)
            outfile.write('<%sCargoWeight>%s</%sCargoWeight>\n' % (namespace_, self.format_integer(self.CargoWeight, input_name='CargoWeight'), namespace_))
    def hasContent_(self):
        if (
            self.Pieces is not None or
            self.CargoWeight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CargoData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Pieces=%d,\n' % self.Pieces)
        if self.CargoWeight:
            showIndent(outfile, level)
            outfile.write('CargoWeight=model_.WeightData(\n')
            self.CargoWeight.exportLiteral(outfile, level, name_='CargoWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Pieces':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (Pieces): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.Pieces = ival_
            self.validate_Pieces(self.Pieces)    # validate type Pieces
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'CargoWeight':
            obj_ = WeightData.factory()
            obj_.build(child_)
            self.set_CargoWeight(obj_)
# end class CargoData


class CheckInRange(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CheckInDeskFunction=None):
        self.CheckInDeskFunction = CheckInDeskFunction
    def factory(*args_, **kwargs_):
        if CheckInRange.subclass:
            return CheckInRange.subclass(*args_, **kwargs_)
        else:
            return CheckInRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CheckInDeskFunction(self): return self.CheckInDeskFunction
    def set_CheckInDeskFunction(self, CheckInDeskFunction): self.CheckInDeskFunction = CheckInDeskFunction
    def validate_CheckInDeskFunction(self, value):
        # Validate type CheckInDeskFunction, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='CheckInRange', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='CheckInRange')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='CheckInRange'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CheckInRange'):
        if self.CheckInDeskFunction is not None:
            showIndent(outfile, level)
            outfile.write('<%sCheckInDeskFunction>%s</%sCheckInDeskFunction>\n' % (namespace_, self.format_string(quote_xml(self.CheckInDeskFunction).encode(ExternalEncoding), input_name='CheckInDeskFunction'), namespace_))
    def hasContent_(self):
        if (
            self.CheckInDeskFunction is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CheckInRange'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('CheckInDeskFunction=%s,\n' % quote_python(self.CheckInDeskFunction).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'CheckInDeskFunction':
            CheckInDeskFunction_ = ''
            for text__content_ in child_.childNodes:
                CheckInDeskFunction_ += text__content_.nodeValue
            self.CheckInDeskFunction = CheckInDeskFunction_
            self.validate_CheckInDeskFunction(self.CheckInDeskFunction)    # validate type CheckInDeskFunction
# end class CheckInRange


class CodeshareData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, elementIndex=None, Carrier=None, FlightNumber=None, Suffix=None):
        self.elementIndex = elementIndex
        self.Carrier = Carrier
        self.FlightNumber = FlightNumber
        self.Suffix = Suffix
    def factory(*args_, **kwargs_):
        if CodeshareData.subclass:
            return CodeshareData.subclass(*args_, **kwargs_)
        else:
            return CodeshareData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def validate_Carrier(self, value):
        # validate type Carrier
        pass
    def get_FlightNumber(self): return self.FlightNumber
    def set_FlightNumber(self, FlightNumber): self.FlightNumber = FlightNumber
    def validate_FlightNumber(self, value):
        # Validate type FlightNumber, a restriction on xsd:positiveInteger.
        pass
    def get_Suffix(self): return self.Suffix
    def set_Suffix(self, Suffix): self.Suffix = Suffix
    def validate_Suffix(self, value):
        # Validate type Suffix, a restriction on xsd:string.
        pass
    def get_elementIndex(self): return self.elementIndex
    def set_elementIndex(self, elementIndex): self.elementIndex = elementIndex
    def export(self, outfile, level, namespace_='', name_='CodeshareData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='CodeshareData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='CodeshareData'):
        outfile.write(' elementIndex=%s' % (self.format_string(quote_attrib(self.elementIndex).encode(ExternalEncoding), input_name='elementIndex'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CodeshareData'):
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrier>%s</%sCarrier>\n' % (namespace_, self.format_string(quote_xml(self.Carrier).encode(ExternalEncoding), input_name='Carrier'), namespace_))
        if self.FlightNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightNumber>%s</%sFlightNumber>\n' % (namespace_, self.format_integer(self.FlightNumber, input_name='FlightNumber'), namespace_))
        if self.Suffix is not None:
            showIndent(outfile, level)
            outfile.write('<%sSuffix>%s</%sSuffix>\n' % (namespace_, self.format_string(quote_xml(self.Suffix).encode(ExternalEncoding), input_name='Suffix'), namespace_))
    def hasContent_(self):
        if (
            self.Carrier is not None or
            self.FlightNumber is not None or
            self.Suffix is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CodeshareData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.elementIndex is not None:
            showIndent(outfile, level)
            outfile.write('elementIndex = %s,\n' % (self.elementIndex,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Carrier=%s,\n' % quote_python(self.Carrier).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FlightNumber=%d,\n' % self.FlightNumber)
        showIndent(outfile, level)
        outfile.write('Suffix=%s,\n' % quote_python(self.Suffix).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('elementIndex'):
            self.elementIndex = attrs.get('elementIndex').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Carrier':
            Carrier_ = ''
            for text__content_ in child_.childNodes:
                Carrier_ += text__content_.nodeValue
            self.Carrier = Carrier_
            self.validate_Carrier(self.Carrier)    # validate type Carrier
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightNumber':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (FlightNumber): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.FlightNumber = ival_
            self.validate_FlightNumber(self.FlightNumber)    # validate type FlightNumber
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Suffix':
            Suffix_ = ''
            for text__content_ in child_.childNodes:
                Suffix_ += text__content_.nodeValue
            self.Suffix = Suffix_
            self.validate_Suffix(self.Suffix)    # validate type Suffix
# end class CodeshareData


class CrewData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FlightAttendantCrewCount=None, FlightDeckCrewCount=None, TotalCrewCount=None):
        self.FlightAttendantCrewCount = FlightAttendantCrewCount
        self.FlightDeckCrewCount = FlightDeckCrewCount
        self.TotalCrewCount = TotalCrewCount
    def factory(*args_, **kwargs_):
        if CrewData.subclass:
            return CrewData.subclass(*args_, **kwargs_)
        else:
            return CrewData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FlightAttendantCrewCount(self): return self.FlightAttendantCrewCount
    def set_FlightAttendantCrewCount(self, FlightAttendantCrewCount): self.FlightAttendantCrewCount = FlightAttendantCrewCount
    def validate_FlightAttendantCrewCount(self, value):
        # validate type FlightAttendantCrewCount
        pass
    def get_FlightDeckCrewCount(self): return self.FlightDeckCrewCount
    def set_FlightDeckCrewCount(self, FlightDeckCrewCount): self.FlightDeckCrewCount = FlightDeckCrewCount
    def validate_FlightDeckCrewCount(self, value):
        # validate type FlightDeckCrewCount
        pass
    def get_TotalCrewCount(self): return self.TotalCrewCount
    def set_TotalCrewCount(self, TotalCrewCount): self.TotalCrewCount = TotalCrewCount
    def validate_TotalCrewCount(self, value):
        # validate type TotalCrewCount
        pass
    def export(self, outfile, level, namespace_='', name_='CrewData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='CrewData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='CrewData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CrewData'):
        if self.FlightAttendantCrewCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightAttendantCrewCount>%s</%sFlightAttendantCrewCount>\n' % (namespace_, self.format_integer(self.FlightAttendantCrewCount, input_name='FlightAttendantCrewCount'), namespace_))
        if self.FlightDeckCrewCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightDeckCrewCount>%s</%sFlightDeckCrewCount>\n' % (namespace_, self.format_integer(self.FlightDeckCrewCount, input_name='FlightDeckCrewCount'), namespace_))
        if self.TotalCrewCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sTotalCrewCount>%s</%sTotalCrewCount>\n' % (namespace_, self.format_integer(self.TotalCrewCount, input_name='TotalCrewCount'), namespace_))
    def hasContent_(self):
        if (
            self.FlightAttendantCrewCount is not None or
            self.FlightDeckCrewCount is not None or
            self.TotalCrewCount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CrewData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('FlightAttendantCrewCount=%d,\n' % self.FlightAttendantCrewCount)
        showIndent(outfile, level)
        outfile.write('FlightDeckCrewCount=%d,\n' % self.FlightDeckCrewCount)
        showIndent(outfile, level)
        outfile.write('TotalCrewCount=%d,\n' % self.TotalCrewCount)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightAttendantCrewCount':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (FlightAttendantCrewCount): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.FlightAttendantCrewCount = ival_
            self.validate_FlightAttendantCrewCount(self.FlightAttendantCrewCount)    # validate type FlightAttendantCrewCount
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightDeckCrewCount':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (FlightDeckCrewCount): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.FlightDeckCrewCount = ival_
            self.validate_FlightDeckCrewCount(self.FlightDeckCrewCount)    # validate type FlightDeckCrewCount
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'TotalCrewCount':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (TotalCrewCount): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.TotalCrewCount = ival_
            self.validate_TotalCrewCount(self.TotalCrewCount)    # validate type TotalCrewCount
# end class CrewData


class FlightID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Carrier=None, FlightNumber=None, Suffix=None, ScheduledTime=None, InOutbound=None, OriginDestinationAirport=None):
        self.Carrier = Carrier
        self.FlightNumber = FlightNumber
        self.Suffix = Suffix
        self.ScheduledTime = ScheduledTime
        self.InOutbound = InOutbound
        self.OriginDestinationAirport = OriginDestinationAirport
    def factory(*args_, **kwargs_):
        if FlightID.subclass:
            return FlightID.subclass(*args_, **kwargs_)
        else:
            return FlightID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def validate_Carrier(self, value):
        # validate type Carrier
        pass
    def get_FlightNumber(self): return self.FlightNumber
    def set_FlightNumber(self, FlightNumber): self.FlightNumber = FlightNumber
    def validate_FlightNumber(self, value):
        # Validate type FlightNumber, a restriction on xsd:positiveInteger.
        pass
    def get_Suffix(self): return self.Suffix
    def set_Suffix(self, Suffix): self.Suffix = Suffix
    def validate_Suffix(self, value):
        # Validate type Suffix, a restriction on xsd:string.
        pass
    def get_ScheduledTime(self): return self.ScheduledTime
    def set_ScheduledTime(self, ScheduledTime): self.ScheduledTime = ScheduledTime
    def validate_ScheduledTime(self, value):
        # validate type ScheduledTime
        pass
    def get_InOutbound(self): return self.InOutbound
    def set_InOutbound(self, InOutbound): self.InOutbound = InOutbound
    def get_OriginDestinationAirport(self): return self.OriginDestinationAirport
    def set_OriginDestinationAirport(self, OriginDestinationAirport): self.OriginDestinationAirport = OriginDestinationAirport
    def validate_OriginDestinationAirport(self, value):
        # validate type OriginDestinationAirport
        pass
    def export(self, outfile, level, namespace_='', name_='FlightID', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='FlightID')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='FlightID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FlightID'):
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrier>%s</%sCarrier>\n' % (namespace_, self.format_string(quote_xml(self.Carrier).encode(ExternalEncoding), input_name='Carrier'), namespace_))
        if self.FlightNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightNumber>%s</%sFlightNumber>\n' % (namespace_, self.format_integer(self.FlightNumber, input_name='FlightNumber'), namespace_))
        if self.Suffix is not None:
            showIndent(outfile, level)
            outfile.write('<%sSuffix>%s</%sSuffix>\n' % (namespace_, self.format_string(quote_xml(self.Suffix).encode(ExternalEncoding), input_name='Suffix'), namespace_))
        if self.ScheduledTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sScheduledTime>%s</%sScheduledTime>\n' % (namespace_, self.format_string(quote_xml(self.ScheduledTime).encode(ExternalEncoding), input_name='ScheduledTime'), namespace_))
        if self.InOutbound is not None:
            showIndent(outfile, level)
            outfile.write('<%sInOutbound>%s</%sInOutbound>\n' % (namespace_, self.format_integer(self.InOutbound, input_name='InOutbound'), namespace_))
        if self.OriginDestinationAirport is not None:
            showIndent(outfile, level)
            outfile.write('<%sOriginDestinationAirport>%s</%sOriginDestinationAirport>\n' % (namespace_, self.format_string(quote_xml(self.OriginDestinationAirport).encode(ExternalEncoding), input_name='OriginDestinationAirport'), namespace_))
    def hasContent_(self):
        if (
            self.Carrier is not None or
            self.FlightNumber is not None or
            self.Suffix is not None or
            self.ScheduledTime is not None or
            self.InOutbound is not None or
            self.OriginDestinationAirport is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FlightID'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Carrier=%s,\n' % quote_python(self.Carrier).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FlightNumber=%d,\n' % self.FlightNumber)
        showIndent(outfile, level)
        outfile.write('Suffix=%s,\n' % quote_python(self.Suffix).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ScheduledTime=%s,\n' % quote_python(self.ScheduledTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('InOutbound=%s,\n' % quote_python(self.InOutbound).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('OriginDestinationAirport=%s,\n' % quote_python(self.OriginDestinationAirport).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Carrier':
            Carrier_ = ''
            for text__content_ in child_.childNodes:
                Carrier_ += text__content_.nodeValue
            self.Carrier = Carrier_
            self.validate_Carrier(self.Carrier)    # validate type Carrier
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightNumber':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (FlightNumber): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.FlightNumber = ival_
            self.validate_FlightNumber(self.FlightNumber)    # validate type FlightNumber
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Suffix':
            Suffix_ = ''
            for text__content_ in child_.childNodes:
                Suffix_ += text__content_.nodeValue
            self.Suffix = Suffix_
            self.validate_Suffix(self.Suffix)    # validate type Suffix
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScheduledTime':
            ScheduledTime_ = ''
            for text__content_ in child_.childNodes:
                ScheduledTime_ += text__content_.nodeValue
            self.ScheduledTime = ScheduledTime_
            self.validate_ScheduledTime(self.ScheduledTime)    # validate type ScheduledTime
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'InOutbound':
            InOutbound_ = ''
            for text__content_ in child_.childNodes:
                InOutbound_ += text__content_.nodeValue
            self.InOutbound = InOutbound_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'OriginDestinationAirport':
            OriginDestinationAirport_ = ''
            for text__content_ in child_.childNodes:
                OriginDestinationAirport_ += text__content_.nodeValue
            self.OriginDestinationAirport = OriginDestinationAirport_
            self.validate_OriginDestinationAirport(self.OriginDestinationAirport)    # validate type OriginDestinationAirport
# end class FlightID


class ResourceAllocation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CounterAllocation=None):
        self.CounterAllocation = CounterAllocation
    def factory(*args_, **kwargs_):
        if ResourceAllocation.subclass:
            return ResourceAllocation.subclass(*args_, **kwargs_)
        else:
            return ResourceAllocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CounterAllocation(self): return self.CounterAllocation
    def set_CounterAllocation(self, CounterAllocation): self.CounterAllocation = CounterAllocation
    def export(self, outfile, level, namespace_='', name_='ResourceAllocation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='ResourceAllocation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='ResourceAllocation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResourceAllocation'):
        if self.CounterAllocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sCounterAllocation>%s</%sCounterAllocation>\n' % (namespace_, self.format_integer(self.CounterAllocation, input_name='CounterAllocation'), namespace_))
    def hasContent_(self):
        if (
            self.CounterAllocation is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ResourceAllocation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CounterAllocation:
            showIndent(outfile, level)
            outfile.write('CounterAllocation=model_.CounterAllocation(\n')
            self.CounterAllocation.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'CounterAllocation':
            obj_ = CounterAllocation.factory()
            obj_.build(child_)
            self.set_CounterAllocation(obj_)
# end class ResourceAllocation


class FlightLeg(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, activeFlag=None, FlightID=None, ACRegistration=None, ACSubTypeCode=None, ACTypeCode=None, FleetNumber=None, PublicGate=None, PublicStand=None, BagClaim=None, GateInfo=None, StandInfo=None, Runway=None, SecurityCheck=None, Terminal=None, LinkFlight=None, BagMakeUpBelt=None, GateRemark=None, PublicStatusRemark=None, StaffStatusRemark=None, SupplementalRemark=None, PublicComment=None, OperationalComment=None, TransitFlag=None, Stopover=None, Decision=None, Estimated=None, GateOpen=None, GateClose=None, PublicEstimated=None, PushBack=None, WheelsUp=None, Touchdown=None, AtGate=None, Codeshare=None, InFlightService=None, ServicyTypeCode=None, FlightStatus=None, BagCount=None, OvernightIndicator=None, BestKnowTime=None, Irregularity=None):
        self.activeFlag = activeFlag
        self.FlightID = FlightID
        self.ACRegistration = ACRegistration
        self.ACSubTypeCode = ACSubTypeCode
        self.ACTypeCode = ACTypeCode
        self.FleetNumber = FleetNumber
        self.PublicGate = PublicGate
        self.PublicStand = PublicStand
        if BagClaim is None:
            self.BagClaim = []
        else:
            self.BagClaim = BagClaim
        if GateInfo is None:
            self.GateInfo = []
        else:
            self.GateInfo = GateInfo
        if StandInfo is None:
            self.StandInfo = []
        else:
            self.StandInfo = StandInfo
        self.Runway = Runway
        self.SecurityCheck = SecurityCheck
        self.Terminal = Terminal
        self.LinkFlight = LinkFlight
        if BagMakeUpBelt is None:
            self.BagMakeUpBelt = []
        else:
            self.BagMakeUpBelt = BagMakeUpBelt
        self.GateRemark = GateRemark
        self.PublicStatusRemark = PublicStatusRemark
        self.StaffStatusRemark = StaffStatusRemark
        self.SupplementalRemark = SupplementalRemark
        self.PublicComment = PublicComment
        self.OperationalComment = OperationalComment
        self.TransitFlag = TransitFlag
        if Stopover is None:
            self.Stopover = []
        else:
            self.Stopover = Stopover
        self.Decision = Decision
        self.Estimated = Estimated
        self.GateOpen = GateOpen
        self.GateClose = GateClose
        self.PublicEstimated = PublicEstimated
        self.PushBack = PushBack
        self.WheelsUp = WheelsUp
        self.Touchdown = Touchdown
        self.AtGate = AtGate
        if Codeshare is None:
            self.Codeshare = []
        else:
            self.Codeshare = Codeshare
        if InFlightService is None:
            self.InFlightService = []
        else:
            self.InFlightService = InFlightService
        self.ServicyTypeCode = ServicyTypeCode
        self.FlightStatus = FlightStatus
        self.BagCount = BagCount
        self.OvernightIndicator = OvernightIndicator
        self.BestKnowTime = BestKnowTime
        self.Irregularity = Irregularity
    def factory(*args_, **kwargs_):
        if FlightLeg.subclass:
            return FlightLeg.subclass(*args_, **kwargs_)
        else:
            return FlightLeg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FlightID(self): return self.FlightID
    def set_FlightID(self, FlightID): self.FlightID = FlightID
    def get_ACRegistration(self): return self.ACRegistration
    def set_ACRegistration(self, ACRegistration): self.ACRegistration = ACRegistration
    def validate_ACRegistration(self, value):
        # validate type ACRegistration
        pass
    def get_ACSubTypeCode(self): return self.ACSubTypeCode
    def set_ACSubTypeCode(self, ACSubTypeCode): self.ACSubTypeCode = ACSubTypeCode
    def validate_ACSubTypeCode(self, value):
        # validate type ACSubTypeCode
        pass
    def get_ACTypeCode(self): return self.ACTypeCode
    def set_ACTypeCode(self, ACTypeCode): self.ACTypeCode = ACTypeCode
    def validate_ACTypeCode(self, value):
        # validate type ACTypeCode
        pass
    def get_FleetNumber(self): return self.FleetNumber
    def set_FleetNumber(self, FleetNumber): self.FleetNumber = FleetNumber
    def validate_FleetNumber(self, value):
        # Validate type FleetNumber, a restriction on xsd:string.
        pass
    def get_PublicGate(self): return self.PublicGate
    def set_PublicGate(self, PublicGate): self.PublicGate = PublicGate
    def validate_PublicGate(self, value):
        # Validate type PublicGate, a restriction on xsd:string.
        pass
    def get_PublicStand(self): return self.PublicStand
    def set_PublicStand(self, PublicStand): self.PublicStand = PublicStand
    def validate_PublicStand(self, value):
        # Validate type PublicStand, a restriction on xsd:string.
        pass
    def get_BagClaim(self): return self.BagClaim
    def set_BagClaim(self, BagClaim): self.BagClaim = BagClaim
    def add_BagClaim(self, value): self.BagClaim.append(value)
    def insert_BagClaim(self, index, value): self.BagClaim[index] = value
    def get_GateInfo(self): return self.GateInfo
    def set_GateInfo(self, GateInfo): self.GateInfo = GateInfo
    def add_GateInfo(self, value): self.GateInfo.append(value)
    def insert_GateInfo(self, index, value): self.GateInfo[index] = value
    def get_StandInfo(self): return self.StandInfo
    def set_StandInfo(self, StandInfo): self.StandInfo = StandInfo
    def add_StandInfo(self, value): self.StandInfo.append(value)
    def insert_StandInfo(self, index, value): self.StandInfo[index] = value
    def get_Runway(self): return self.Runway
    def set_Runway(self, Runway): self.Runway = Runway
    def validate_Runway(self, value):
        # Validate type Runway, a restriction on xsd:string.
        pass
    def get_SecurityCheck(self): return self.SecurityCheck
    def set_SecurityCheck(self, SecurityCheck): self.SecurityCheck = SecurityCheck
    def validate_SecurityCheck(self, value):
        # Validate type SecurityCheck, a restriction on xsd:boolean.
        pass
    def get_Terminal(self): return self.Terminal
    def set_Terminal(self, Terminal): self.Terminal = Terminal
    def validate_Terminal(self, value):
        # Validate type Terminal, a restriction on xsd:string.
        pass
    def get_LinkFlight(self): return self.LinkFlight
    def set_LinkFlight(self, LinkFlight): self.LinkFlight = LinkFlight
    def get_BagMakeUpBelt(self): return self.BagMakeUpBelt
    def set_BagMakeUpBelt(self, BagMakeUpBelt): self.BagMakeUpBelt = BagMakeUpBelt
    def add_BagMakeUpBelt(self, value): self.BagMakeUpBelt.append(value)
    def insert_BagMakeUpBelt(self, index, value): self.BagMakeUpBelt[index] = value
    def get_GateRemark(self): return self.GateRemark
    def set_GateRemark(self, GateRemark): self.GateRemark = GateRemark
    def validate_GateRemark(self, value):
        # validate type GateRemark
        pass
    def get_PublicStatusRemark(self): return self.PublicStatusRemark
    def set_PublicStatusRemark(self, PublicStatusRemark): self.PublicStatusRemark = PublicStatusRemark
    def get_StaffStatusRemark(self): return self.StaffStatusRemark
    def set_StaffStatusRemark(self, StaffStatusRemark): self.StaffStatusRemark = StaffStatusRemark
    def get_SupplementalRemark(self): return self.SupplementalRemark
    def set_SupplementalRemark(self, SupplementalRemark): self.SupplementalRemark = SupplementalRemark
    def validate_SupplementalRemark(self, value):
        # validate type SupplementalRemark
        pass
    def get_PublicComment(self): return self.PublicComment
    def set_PublicComment(self, PublicComment): self.PublicComment = PublicComment
    def validate_PublicComment(self, value):
        # validate type PublicComment
        pass
    def get_OperationalComment(self): return self.OperationalComment
    def set_OperationalComment(self, OperationalComment): self.OperationalComment = OperationalComment
    def validate_OperationalComment(self, value):
        # validate type OperationalComment
        pass
    def get_TransitFlag(self): return self.TransitFlag
    def set_TransitFlag(self, TransitFlag): self.TransitFlag = TransitFlag
    def validate_TransitFlag(self, value):
        # Validate type TransitFlag, a restriction on xsd:boolean.
        pass
    def get_Stopover(self): return self.Stopover
    def set_Stopover(self, Stopover): self.Stopover = Stopover
    def add_Stopover(self, value): self.Stopover.append(value)
    def insert_Stopover(self, index, value): self.Stopover[index] = value
    def get_Decision(self): return self.Decision
    def set_Decision(self, Decision): self.Decision = Decision
    def validate_Decision(self, value):
        # validate type Decision
        pass
    def get_Estimated(self): return self.Estimated
    def set_Estimated(self, Estimated): self.Estimated = Estimated
    def validate_Estimated(self, value):
        # validate type Estimated
        pass
    def get_GateOpen(self): return self.GateOpen
    def set_GateOpen(self, GateOpen): self.GateOpen = GateOpen
    def validate_GateOpen(self, value):
        # validate type GateOpen
        pass
    def get_GateClose(self): return self.GateClose
    def set_GateClose(self, GateClose): self.GateClose = GateClose
    def validate_GateClose(self, value):
        # validate type GateClose
        pass
    def get_PublicEstimated(self): return self.PublicEstimated
    def set_PublicEstimated(self, PublicEstimated): self.PublicEstimated = PublicEstimated
    def validate_PublicEstimated(self, value):
        # validate type PublicEstimated
        pass
    def get_PushBack(self): return self.PushBack
    def set_PushBack(self, PushBack): self.PushBack = PushBack
    def validate_PushBack(self, value):
        # validate type PushBack
        pass
    def get_WheelsUp(self): return self.WheelsUp
    def set_WheelsUp(self, WheelsUp): self.WheelsUp = WheelsUp
    def validate_WheelsUp(self, value):
        # validate type WheelsUp
        pass
    def get_Touchdown(self): return self.Touchdown
    def set_Touchdown(self, Touchdown): self.Touchdown = Touchdown
    def validate_Touchdown(self, value):
        # validate type Touchdown
        pass
    def get_AtGate(self): return self.AtGate
    def set_AtGate(self, AtGate): self.AtGate = AtGate
    def validate_AtGate(self, value):
        # validate type AtGate
        pass
    def get_Codeshare(self): return self.Codeshare
    def set_Codeshare(self, Codeshare): self.Codeshare = Codeshare
    def add_Codeshare(self, value): self.Codeshare.append(value)
    def insert_Codeshare(self, index, value): self.Codeshare[index] = value
    def get_InFlightService(self): return self.InFlightService
    def set_InFlightService(self, InFlightService): self.InFlightService = InFlightService
    def add_InFlightService(self, value): self.InFlightService.append(value)
    def insert_InFlightService(self, index, value): self.InFlightService[index] = value
    def get_ServicyTypeCode(self): return self.ServicyTypeCode
    def set_ServicyTypeCode(self, ServicyTypeCode): self.ServicyTypeCode = ServicyTypeCode
    def validate_ServicyTypeCode(self, value):
        # validate type ServicyTypeCode
        pass
    def get_FlightStatus(self): return self.FlightStatus
    def set_FlightStatus(self, FlightStatus): self.FlightStatus = FlightStatus
    def validate_FlightStatus(self, value):
        # Validate type FlightStatus, a restriction on xsd:string.
        pass
    def get_BagCount(self): return self.BagCount
    def set_BagCount(self, BagCount): self.BagCount = BagCount
    def validate_BagCount(self, value):
        # Validate type BagCount, a restriction on xsd:nonNegativeInteger.
        pass
    def get_OvernightIndicator(self): return self.OvernightIndicator
    def set_OvernightIndicator(self, OvernightIndicator): self.OvernightIndicator = OvernightIndicator
    def validate_OvernightIndicator(self, value):
        # validate type OvernightIndicator
        pass
    def get_BestKnowTime(self): return self.BestKnowTime
    def set_BestKnowTime(self, BestKnowTime): self.BestKnowTime = BestKnowTime
    def validate_BestKnowTime(self, value):
        # validate type BestKnowTime
        pass
    def get_Irregularity(self): return self.Irregularity
    def set_Irregularity(self, Irregularity): self.Irregularity = Irregularity
    def get_activeFlag(self): return self.activeFlag
    def set_activeFlag(self, activeFlag): self.activeFlag = activeFlag
    def export(self, outfile, level, namespace_='', name_='FlightLeg', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='FlightLeg')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='FlightLeg'):
        if self.activeFlag is not None:
            outfile.write(' activeFlag=%s' % (self.format_string(quote_attrib(self.activeFlag).encode(ExternalEncoding), input_name='activeFlag'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='FlightLeg'):
        if self.FlightID is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightID>%s</%sFlightID>\n' % (namespace_, self.format_integer(self.FlightID, input_name='FlightID'), namespace_))
        if self.ACRegistration is not None:
            showIndent(outfile, level)
            outfile.write('<%sACRegistration>%s</%sACRegistration>\n' % (namespace_, self.format_string(quote_xml(self.ACRegistration).encode(ExternalEncoding), input_name='ACRegistration'), namespace_))
        if self.ACSubTypeCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sACSubTypeCode>%s</%sACSubTypeCode>\n' % (namespace_, self.format_string(quote_xml(self.ACSubTypeCode).encode(ExternalEncoding), input_name='ACSubTypeCode'), namespace_))
        if self.ACTypeCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sACTypeCode>%s</%sACTypeCode>\n' % (namespace_, self.format_string(quote_xml(self.ACTypeCode).encode(ExternalEncoding), input_name='ACTypeCode'), namespace_))
        if self.FleetNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFleetNumber>%s</%sFleetNumber>\n' % (namespace_, self.format_string(quote_xml(self.FleetNumber).encode(ExternalEncoding), input_name='FleetNumber'), namespace_))
        if self.PublicGate is not None:
            showIndent(outfile, level)
            outfile.write('<%sPublicGate>%s</%sPublicGate>\n' % (namespace_, self.format_string(quote_xml(self.PublicGate).encode(ExternalEncoding), input_name='PublicGate'), namespace_))
        if self.PublicStand is not None:
            showIndent(outfile, level)
            outfile.write('<%sPublicStand>%s</%sPublicStand>\n' % (namespace_, self.format_string(quote_xml(self.PublicStand).encode(ExternalEncoding), input_name='PublicStand'), namespace_))
        for BagClaim_ in self.BagClaim:
            showIndent(outfile, level)
            outfile.write('<%sBagClaim>%s</%sBagClaim>\n' % (namespace_, self.format_integer(BagClaim_, input_name='BagClaim'), namespace_))
        for GateInfo_ in self.GateInfo:
            showIndent(outfile, level)
            outfile.write('<%sGateInfo>%s</%sGateInfo>\n' % (namespace_, self.format_integer(GateInfo_, input_name='GateInfo'), namespace_))
        for StandInfo_ in self.StandInfo:
            showIndent(outfile, level)
            outfile.write('<%sStandInfo>%s</%sStandInfo>\n' % (namespace_, self.format_integer(StandInfo_, input_name='StandInfo'), namespace_))
        if self.Runway is not None:
            showIndent(outfile, level)
            outfile.write('<%sRunway>%s</%sRunway>\n' % (namespace_, self.format_string(quote_xml(self.Runway).encode(ExternalEncoding), input_name='Runway'), namespace_))
        if self.SecurityCheck is not None:
            showIndent(outfile, level)
            outfile.write('<%sSecurityCheck>%s</%sSecurityCheck>\n' % (namespace_, self.format_boolean(str_lower(str(self.SecurityCheck, input_name='SecurityCheck'))), namespace_))
        if self.Terminal is not None:
            showIndent(outfile, level)
            outfile.write('<%sTerminal>%s</%sTerminal>\n' % (namespace_, self.format_string(quote_xml(self.Terminal).encode(ExternalEncoding), input_name='Terminal'), namespace_))
        if self.LinkFlight is not None:
            showIndent(outfile, level)
            outfile.write('<%sLinkFlight>%s</%sLinkFlight>\n' % (namespace_, self.format_integer(self.LinkFlight, input_name='LinkFlight'), namespace_))
        for BagMakeUpBelt_ in self.BagMakeUpBelt:
            showIndent(outfile, level)
            outfile.write('<%sBagMakeUpBelt>%s</%sBagMakeUpBelt>\n' % (namespace_, self.format_integer(BagMakeUpBelt_, input_name='BagMakeUpBelt'), namespace_))
        if self.GateRemark is not None:
            showIndent(outfile, level)
            outfile.write('<%sGateRemark>%s</%sGateRemark>\n' % (namespace_, self.format_string(quote_xml(self.GateRemark).encode(ExternalEncoding), input_name='GateRemark'), namespace_))
        if self.PublicStatusRemark is not None:
            showIndent(outfile, level)
            outfile.write('<%sPublicStatusRemark>%s</%sPublicStatusRemark>\n' % (namespace_, self.format_integer(self.PublicStatusRemark, input_name='PublicStatusRemark'), namespace_))
        if self.StaffStatusRemark is not None:
            showIndent(outfile, level)
            outfile.write('<%sStaffStatusRemark>%s</%sStaffStatusRemark>\n' % (namespace_, self.format_integer(self.StaffStatusRemark, input_name='StaffStatusRemark'), namespace_))
        if self.SupplementalRemark is not None:
            showIndent(outfile, level)
            outfile.write('<%sSupplementalRemark>%s</%sSupplementalRemark>\n' % (namespace_, self.format_string(quote_xml(self.SupplementalRemark).encode(ExternalEncoding), input_name='SupplementalRemark'), namespace_))
        if self.PublicComment is not None:
            showIndent(outfile, level)
            outfile.write('<%sPublicComment>%s</%sPublicComment>\n' % (namespace_, self.format_string(quote_xml(self.PublicComment).encode(ExternalEncoding), input_name='PublicComment'), namespace_))
        if self.OperationalComment is not None:
            showIndent(outfile, level)
            outfile.write('<%sOperationalComment>%s</%sOperationalComment>\n' % (namespace_, self.format_string(quote_xml(self.OperationalComment).encode(ExternalEncoding), input_name='OperationalComment'), namespace_))
        if self.TransitFlag is not None:
            showIndent(outfile, level)
            outfile.write('<%sTransitFlag>%s</%sTransitFlag>\n' % (namespace_, self.format_boolean(str_lower(str(self.TransitFlag, input_name='TransitFlag'))), namespace_))
        for Stopover_ in self.Stopover:
            showIndent(outfile, level)
            outfile.write('<%sStopover>%s</%sStopover>\n' % (namespace_, self.format_integer(Stopover_, input_name='Stopover'), namespace_))
        if self.Decision is not None:
            showIndent(outfile, level)
            outfile.write('<%sDecision>%s</%sDecision>\n' % (namespace_, self.format_string(quote_xml(self.Decision).encode(ExternalEncoding), input_name='Decision'), namespace_))
        if self.Estimated is not None:
            showIndent(outfile, level)
            outfile.write('<%sEstimated>%s</%sEstimated>\n' % (namespace_, self.format_string(quote_xml(self.Estimated).encode(ExternalEncoding), input_name='Estimated'), namespace_))
        if self.GateOpen is not None:
            showIndent(outfile, level)
            outfile.write('<%sGateOpen>%s</%sGateOpen>\n' % (namespace_, self.format_string(quote_xml(self.GateOpen).encode(ExternalEncoding), input_name='GateOpen'), namespace_))
        if self.GateClose is not None:
            showIndent(outfile, level)
            outfile.write('<%sGateClose>%s</%sGateClose>\n' % (namespace_, self.format_string(quote_xml(self.GateClose).encode(ExternalEncoding), input_name='GateClose'), namespace_))
        if self.PublicEstimated is not None:
            showIndent(outfile, level)
            outfile.write('<%sPublicEstimated>%s</%sPublicEstimated>\n' % (namespace_, self.format_string(quote_xml(self.PublicEstimated).encode(ExternalEncoding), input_name='PublicEstimated'), namespace_))
        if self.PushBack is not None:
            showIndent(outfile, level)
            outfile.write('<%sPushBack>%s</%sPushBack>\n' % (namespace_, self.format_string(quote_xml(self.PushBack).encode(ExternalEncoding), input_name='PushBack'), namespace_))
        if self.WheelsUp is not None:
            showIndent(outfile, level)
            outfile.write('<%sWheelsUp>%s</%sWheelsUp>\n' % (namespace_, self.format_string(quote_xml(self.WheelsUp).encode(ExternalEncoding), input_name='WheelsUp'), namespace_))
        if self.Touchdown is not None:
            showIndent(outfile, level)
            outfile.write('<%sTouchdown>%s</%sTouchdown>\n' % (namespace_, self.format_string(quote_xml(self.Touchdown).encode(ExternalEncoding), input_name='Touchdown'), namespace_))
        if self.AtGate is not None:
            showIndent(outfile, level)
            outfile.write('<%sAtGate>%s</%sAtGate>\n' % (namespace_, self.format_string(quote_xml(self.AtGate).encode(ExternalEncoding), input_name='AtGate'), namespace_))
        for Codeshare_ in self.Codeshare:
            showIndent(outfile, level)
            outfile.write('<%sCodeshare>%s</%sCodeshare>\n' % (namespace_, self.format_integer(Codeshare_, input_name='Codeshare'), namespace_))
        for InFlightService_ in self.InFlightService:
            showIndent(outfile, level)
            outfile.write('<%sInFlightService>%s</%sInFlightService>\n' % (namespace_, self.format_integer(InFlightService_, input_name='InFlightService'), namespace_))
        if self.ServicyTypeCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sServicyTypeCode>%s</%sServicyTypeCode>\n' % (namespace_, self.format_string(quote_xml(self.ServicyTypeCode).encode(ExternalEncoding), input_name='ServicyTypeCode'), namespace_))
        if self.FlightStatus is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightStatus>%s</%sFlightStatus>\n' % (namespace_, self.format_string(quote_xml(self.FlightStatus).encode(ExternalEncoding), input_name='FlightStatus'), namespace_))
        if self.BagCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sBagCount>%s</%sBagCount>\n' % (namespace_, self.format_integer(self.BagCount, input_name='BagCount'), namespace_))
        if self.OvernightIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sOvernightIndicator>%s</%sOvernightIndicator>\n' % (namespace_, self.format_string(quote_xml(self.OvernightIndicator).encode(ExternalEncoding), input_name='OvernightIndicator'), namespace_))
        if self.BestKnowTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sBestKnowTime>%s</%sBestKnowTime>\n' % (namespace_, self.format_string(quote_xml(self.BestKnowTime).encode(ExternalEncoding), input_name='BestKnowTime'), namespace_))
        if self.Irregularity is not None:
            showIndent(outfile, level)
            outfile.write('<%sIrregularity>%s</%sIrregularity>\n' % (namespace_, self.format_integer(self.Irregularity, input_name='Irregularity'), namespace_))
    def hasContent_(self):
        if (
            self.FlightID is not None or
            self.ACRegistration is not None or
            self.ACSubTypeCode is not None or
            self.ACTypeCode is not None or
            self.FleetNumber is not None or
            self.PublicGate is not None or
            self.PublicStand is not None or
            self.BagClaim is not None or
            self.GateInfo is not None or
            self.StandInfo is not None or
            self.Runway is not None or
            self.SecurityCheck is not None or
            self.Terminal is not None or
            self.LinkFlight is not None or
            self.BagMakeUpBelt is not None or
            self.GateRemark is not None or
            self.PublicStatusRemark is not None or
            self.StaffStatusRemark is not None or
            self.SupplementalRemark is not None or
            self.PublicComment is not None or
            self.OperationalComment is not None or
            self.TransitFlag is not None or
            self.Stopover is not None or
            self.Decision is not None or
            self.Estimated is not None or
            self.GateOpen is not None or
            self.GateClose is not None or
            self.PublicEstimated is not None or
            self.PushBack is not None or
            self.WheelsUp is not None or
            self.Touchdown is not None or
            self.AtGate is not None or
            self.Codeshare is not None or
            self.InFlightService is not None or
            self.ServicyTypeCode is not None or
            self.FlightStatus is not None or
            self.BagCount is not None or
            self.OvernightIndicator is not None or
            self.BestKnowTime is not None or
            self.Irregularity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FlightLeg'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.activeFlag is not None:
            showIndent(outfile, level)
            outfile.write('activeFlag = %s,\n' % (self.activeFlag,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FlightID:
            showIndent(outfile, level)
            outfile.write('FlightID=model_.FlightLegKey(\n')
            self.FlightID.exportLiteral(outfile, level, name_='FlightID')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ACRegistration=%s,\n' % quote_python(self.ACRegistration).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ACSubTypeCode=%s,\n' % quote_python(self.ACSubTypeCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ACTypeCode=%s,\n' % quote_python(self.ACTypeCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FleetNumber=%s,\n' % quote_python(self.FleetNumber).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('PublicGate=%s,\n' % quote_python(self.PublicGate).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('PublicStand=%s,\n' % quote_python(self.PublicStand).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('BagClaim=[\n')
        level += 1
        for BagClaim in self.BagClaim:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(BagClaim).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('GateInfo=[\n')
        level += 1
        for GateInfo in self.GateInfo:
            showIndent(outfile, level)
            outfile.write('model_.GateInfo(\n')
            GateInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('StandInfo=[\n')
        level += 1
        for StandInfo in self.StandInfo:
            showIndent(outfile, level)
            outfile.write('model_.StandInfo(\n')
            StandInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Runway=%s,\n' % quote_python(self.Runway).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SecurityCheck=%s,\n' % self.SecurityCheck)
        showIndent(outfile, level)
        outfile.write('Terminal=%s,\n' % quote_python(self.Terminal).encode(ExternalEncoding))
        if self.LinkFlight:
            showIndent(outfile, level)
            outfile.write('LinkFlight=model_.FlightLinkData(\n')
            self.LinkFlight.exportLiteral(outfile, level, name_='LinkFlight')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('BagMakeUpBelt=[\n')
        level += 1
        for BagMakeUpBelt in self.BagMakeUpBelt:
            showIndent(outfile, level)
            outfile.write('model_.BagMakeUpBelt(\n')
            BagMakeUpBelt.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('GateRemark=%s,\n' % quote_python(self.GateRemark).encode(ExternalEncoding))
        if self.PublicStatusRemark:
            showIndent(outfile, level)
            outfile.write('PublicStatusRemark=model_.PublicStatusRemark(\n')
            self.PublicStatusRemark.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.StaffStatusRemark:
            showIndent(outfile, level)
            outfile.write('StaffStatusRemark=model_.StaffStatusRemark(\n')
            self.StaffStatusRemark.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('SupplementalRemark=%s,\n' % quote_python(self.SupplementalRemark).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('PublicComment=%s,\n' % quote_python(self.PublicComment).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('OperationalComment=%s,\n' % quote_python(self.OperationalComment).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('TransitFlag=%s,\n' % self.TransitFlag)
        showIndent(outfile, level)
        outfile.write('Stopover=[\n')
        level += 1
        for Stopover in self.Stopover:
            showIndent(outfile, level)
            outfile.write('model_.Stopover(\n')
            Stopover.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Decision=%s,\n' % quote_python(self.Decision).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Estimated=%s,\n' % quote_python(self.Estimated).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('GateOpen=%s,\n' % quote_python(self.GateOpen).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('GateClose=%s,\n' % quote_python(self.GateClose).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('PublicEstimated=%s,\n' % quote_python(self.PublicEstimated).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('PushBack=%s,\n' % quote_python(self.PushBack).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('WheelsUp=%s,\n' % quote_python(self.WheelsUp).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Touchdown=%s,\n' % quote_python(self.Touchdown).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AtGate=%s,\n' % quote_python(self.AtGate).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Codeshare=[\n')
        level += 1
        for Codeshare in self.Codeshare:
            showIndent(outfile, level)
            outfile.write('model_.Codeshare(\n')
            Codeshare.exportLiteral(outfile, level, name_='Codeshare')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('InFlightService=[\n')
        level += 1
        for InFlightService in self.InFlightService:
            showIndent(outfile, level)
            outfile.write('model_.InFlightService(\n')
            InFlightService.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ServicyTypeCode=%s,\n' % quote_python(self.ServicyTypeCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FlightStatus=%s,\n' % quote_python(self.FlightStatus).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('BagCount=%d,\n' % self.BagCount)
        showIndent(outfile, level)
        outfile.write('OvernightIndicator=%s,\n' % quote_python(self.OvernightIndicator).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('BestKnowTime=%s,\n' % quote_python(self.BestKnowTime).encode(ExternalEncoding))
        if self.Irregularity:
            showIndent(outfile, level)
            outfile.write('Irregularity=model_.Irregularity(\n')
            self.Irregularity.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('activeFlag'):
            self.activeFlag = attrs.get('activeFlag').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightID':
            obj_ = FlightID.factory()
            obj_.build(child_)
            self.set_FlightID(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ACRegistration':
            ACRegistration_ = ''
            for text__content_ in child_.childNodes:
                ACRegistration_ += text__content_.nodeValue
            self.ACRegistration = ACRegistration_
            self.validate_ACRegistration(self.ACRegistration)    # validate type ACRegistration
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ACSubTypeCode':
            ACSubTypeCode_ = ''
            for text__content_ in child_.childNodes:
                ACSubTypeCode_ += text__content_.nodeValue
            self.ACSubTypeCode = ACSubTypeCode_
            self.validate_ACSubTypeCode(self.ACSubTypeCode)    # validate type ACSubTypeCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ACTypeCode':
            ACTypeCode_ = ''
            for text__content_ in child_.childNodes:
                ACTypeCode_ += text__content_.nodeValue
            self.ACTypeCode = ACTypeCode_
            self.validate_ACTypeCode(self.ACTypeCode)    # validate type ACTypeCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FleetNumber':
            FleetNumber_ = ''
            for text__content_ in child_.childNodes:
                FleetNumber_ += text__content_.nodeValue
            self.FleetNumber = FleetNumber_
            self.validate_FleetNumber(self.FleetNumber)    # validate type FleetNumber
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PublicGate':
            PublicGate_ = ''
            for text__content_ in child_.childNodes:
                PublicGate_ += text__content_.nodeValue
            self.PublicGate = PublicGate_
            self.validate_PublicGate(self.PublicGate)    # validate type PublicGate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PublicStand':
            PublicStand_ = ''
            for text__content_ in child_.childNodes:
                PublicStand_ += text__content_.nodeValue
            self.PublicStand = PublicStand_
            self.validate_PublicStand(self.PublicStand)    # validate type PublicStand
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BagClaim':
            type_name = child_.attributes.getNamedItemNS(
                'http://www.w3.org/2001/XMLSchema-instance', 'type')
            if type_name is not None:
                class_ = globals()[type_name.value]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <BagClaim> element')
            self.BagClaim.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'GateInfo':
            type_name = child_.attributes.getNamedItemNS(
                'http://www.w3.org/2001/XMLSchema-instance', 'type')
            if type_name is not None:
                class_ = globals()[type_name.value]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <GateInfo> element')
            self.GateInfo.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'StandInfo':
            type_name = child_.attributes.getNamedItemNS(
                'http://www.w3.org/2001/XMLSchema-instance', 'type')
            if type_name is not None:
                class_ = globals()[type_name.value]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <StandInfo> element')
            self.StandInfo.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Runway':
            Runway_ = ''
            for text__content_ in child_.childNodes:
                Runway_ += text__content_.nodeValue
            self.Runway = Runway_
            self.validate_Runway(self.Runway)    # validate type Runway
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SecurityCheck':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.SecurityCheck = ival_
            self.validate_SecurityCheck(self.SecurityCheck)    # validate type SecurityCheck
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Terminal':
            Terminal_ = ''
            for text__content_ in child_.childNodes:
                Terminal_ += text__content_.nodeValue
            self.Terminal = Terminal_
            self.validate_Terminal(self.Terminal)    # validate type Terminal
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'LinkFlight':
            obj_ = FlightLinkData.factory()
            obj_.build(child_)
            self.set_LinkFlight(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BagMakeUpBelt':
            type_name = child_.attributes.getNamedItemNS(
                'http://www.w3.org/2001/XMLSchema-instance', 'type')
            if type_name is not None:
                class_ = globals()[type_name.value]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <BagMakeUpBelt> element')
            self.BagMakeUpBelt.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'GateRemark':
            GateRemark_ = ''
            for text__content_ in child_.childNodes:
                GateRemark_ += text__content_.nodeValue
            self.GateRemark = GateRemark_
            self.validate_GateRemark(self.GateRemark)    # validate type GateRemark
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PublicStatusRemark':
            obj_ = PublicStatusRemark.factory()
            obj_.build(child_)
            self.set_PublicStatusRemark(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'StaffStatusRemark':
            obj_ = StaffStatusRemark.factory()
            obj_.build(child_)
            self.set_StaffStatusRemark(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SupplementalRemark':
            SupplementalRemark_ = ''
            for text__content_ in child_.childNodes:
                SupplementalRemark_ += text__content_.nodeValue
            self.SupplementalRemark = SupplementalRemark_
            self.validate_SupplementalRemark(self.SupplementalRemark)    # validate type SupplementalRemark
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PublicComment':
            PublicComment_ = ''
            for text__content_ in child_.childNodes:
                PublicComment_ += text__content_.nodeValue
            self.PublicComment = PublicComment_
            self.validate_PublicComment(self.PublicComment)    # validate type PublicComment
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'OperationalComment':
            OperationalComment_ = ''
            for text__content_ in child_.childNodes:
                OperationalComment_ += text__content_.nodeValue
            self.OperationalComment = OperationalComment_
            self.validate_OperationalComment(self.OperationalComment)    # validate type OperationalComment
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'TransitFlag':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.TransitFlag = ival_
            self.validate_TransitFlag(self.TransitFlag)    # validate type TransitFlag
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Stopover':
            type_name = child_.attributes.getNamedItemNS(
                'http://www.w3.org/2001/XMLSchema-instance', 'type')
            if type_name is not None:
                class_ = globals()[type_name.value]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <Stopover> element')
            self.Stopover.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Decision':
            Decision_ = ''
            for text__content_ in child_.childNodes:
                Decision_ += text__content_.nodeValue
            self.Decision = Decision_
            self.validate_Decision(self.Decision)    # validate type Decision
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Estimated':
            Estimated_ = ''
            for text__content_ in child_.childNodes:
                Estimated_ += text__content_.nodeValue
            self.Estimated = Estimated_
            self.validate_Estimated(self.Estimated)    # validate type Estimated
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'GateOpen':
            GateOpen_ = ''
            for text__content_ in child_.childNodes:
                GateOpen_ += text__content_.nodeValue
            self.GateOpen = GateOpen_
            self.validate_GateOpen(self.GateOpen)    # validate type GateOpen
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'GateClose':
            GateClose_ = ''
            for text__content_ in child_.childNodes:
                GateClose_ += text__content_.nodeValue
            self.GateClose = GateClose_
            self.validate_GateClose(self.GateClose)    # validate type GateClose
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PublicEstimated':
            PublicEstimated_ = ''
            for text__content_ in child_.childNodes:
                PublicEstimated_ += text__content_.nodeValue
            self.PublicEstimated = PublicEstimated_
            self.validate_PublicEstimated(self.PublicEstimated)    # validate type PublicEstimated
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PushBack':
            PushBack_ = ''
            for text__content_ in child_.childNodes:
                PushBack_ += text__content_.nodeValue
            self.PushBack = PushBack_
            self.validate_PushBack(self.PushBack)    # validate type PushBack
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'WheelsUp':
            WheelsUp_ = ''
            for text__content_ in child_.childNodes:
                WheelsUp_ += text__content_.nodeValue
            self.WheelsUp = WheelsUp_
            self.validate_WheelsUp(self.WheelsUp)    # validate type WheelsUp
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Touchdown':
            Touchdown_ = ''
            for text__content_ in child_.childNodes:
                Touchdown_ += text__content_.nodeValue
            self.Touchdown = Touchdown_
            self.validate_Touchdown(self.Touchdown)    # validate type Touchdown
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'AtGate':
            AtGate_ = ''
            for text__content_ in child_.childNodes:
                AtGate_ += text__content_.nodeValue
            self.AtGate = AtGate_
            self.validate_AtGate(self.AtGate)    # validate type AtGate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Codeshare':
            obj_ = CodeshareData.factory()
            obj_.build(child_)
            self.Codeshare.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'InFlightService':
            obj_ = InFlightService.factory()
            obj_.build(child_)
            self.InFlightService.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ServicyTypeCode':
            ServicyTypeCode_ = ''
            for text__content_ in child_.childNodes:
                ServicyTypeCode_ += text__content_.nodeValue
            self.ServicyTypeCode = ServicyTypeCode_
            self.validate_ServicyTypeCode(self.ServicyTypeCode)    # validate type ServicyTypeCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightStatus':
            FlightStatus_ = ''
            for text__content_ in child_.childNodes:
                FlightStatus_ += text__content_.nodeValue
            self.FlightStatus = FlightStatus_
            self.validate_FlightStatus(self.FlightStatus)    # validate type FlightStatus
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BagCount':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (BagCount): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.BagCount = ival_
            self.validate_BagCount(self.BagCount)    # validate type BagCount
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'OvernightIndicator':
            OvernightIndicator_ = ''
            for text__content_ in child_.childNodes:
                OvernightIndicator_ += text__content_.nodeValue
            self.OvernightIndicator = OvernightIndicator_
            self.validate_OvernightIndicator(self.OvernightIndicator)    # validate type OvernightIndicator
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'BestKnowTime':
            BestKnowTime_ = ''
            for text__content_ in child_.childNodes:
                BestKnowTime_ += text__content_.nodeValue
            self.BestKnowTime = BestKnowTime_
            self.validate_BestKnowTime(self.BestKnowTime)    # validate type BestKnowTime
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Irregularity':
            obj_ = Irregularity.factory()
            obj_.build(child_)
            self.set_Irregularity(obj_)
# end class FlightLeg


class BagClaim(BagClaimInfo):
    subclass = None
    superclass = BagClaimInfo
    def __init__(self, BagClaimHall=None, BagClaimName=None, BagClaimStatus=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, EndTime=None, SupplementalTime=None, elementIndex=None):
        BagClaimInfo.__init__(self, BagClaimHall, BagClaimName, BagClaimStatus, SchedBegin, SchedEnd, ActualBegin, ActualEnd, EndTime, SupplementalTime)
        self.elementIndex = elementIndex
        pass
    def factory(*args_, **kwargs_):
        if BagClaim.subclass:
            return BagClaim.subclass(*args_, **kwargs_)
        else:
            return BagClaim(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_elementIndex(self): return self.elementIndex
    def set_elementIndex(self, elementIndex): self.elementIndex = elementIndex
    def export(self, outfile, level, namespace_='', name_='BagClaim', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='BagClaim')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="BagClaim"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='BagClaim'):
        BagClaimInfo.exportAttributes(self, outfile, level, namespace_, name_='BagClaim')
        if self.elementIndex is not None:
            outfile.write(' elementIndex=%s' % (self.format_string(quote_attrib(self.elementIndex).encode(ExternalEncoding), input_name='elementIndex'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='BagClaim'):
        BagClaimInfo.exportChildren(self, outfile, level, namespace_, name_)
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BagClaim'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.elementIndex is not None:
            showIndent(outfile, level)
            outfile.write('elementIndex = %s,\n' % (self.elementIndex,))
        BagClaimInfo.exportLiteralAttributes(self, outfile, level, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        BagClaimInfo.exportLiteralChildren(self, outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('elementIndex'):
            self.elementIndex = attrs.get('elementIndex').value
        BagClaimInfo.buildAttributes(self, attrs)
    def buildChildren(self, child_, nodeName_):
        BagClaimInfo.buildChildren(self, child_, nodeName_)
# end class BagClaim


class BagMakeUpBelt(BaggageMakeUpBeltInfo):
    subclass = None
    superclass = BaggageMakeUpBeltInfo
    def __init__(self, BaggageMakeUpBelt=None, SchedBegin=None, SchedEnd=None, ActualBegin=None, ActualEnd=None, SupplementalTime=None, elementIndex=None):
        BaggageMakeUpBeltInfo.__init__(self, BaggageMakeUpBelt, SchedBegin, SchedEnd, ActualBegin, ActualEnd, SupplementalTime)
        self.elementIndex = elementIndex
        pass
    def factory(*args_, **kwargs_):
        if BagMakeUpBelt.subclass:
            return BagMakeUpBelt.subclass(*args_, **kwargs_)
        else:
            return BagMakeUpBelt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_elementIndex(self): return self.elementIndex
    def set_elementIndex(self, elementIndex): self.elementIndex = elementIndex
    def export(self, outfile, level, namespace_='', name_='BagMakeUpBelt', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='BagMakeUpBelt')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="BagMakeUpBelt"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='BagMakeUpBelt'):
        BaggageMakeUpBeltInfo.exportAttributes(self, outfile, level, namespace_, name_='BagMakeUpBelt')
        if self.elementIndex is not None:
            outfile.write(' elementIndex=%s' % (self.format_string(quote_attrib(self.elementIndex).encode(ExternalEncoding), input_name='elementIndex'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='BagMakeUpBelt'):
        BaggageMakeUpBeltInfo.exportChildren(self, outfile, level, namespace_, name_)
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BagMakeUpBelt'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.elementIndex is not None:
            showIndent(outfile, level)
            outfile.write('elementIndex = %s,\n' % (self.elementIndex,))
        BaggageMakeUpBeltInfo.exportLiteralAttributes(self, outfile, level, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        BaggageMakeUpBeltInfo.exportLiteralChildren(self, outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('elementIndex'):
            self.elementIndex = attrs.get('elementIndex').value
        BaggageMakeUpBeltInfo.buildAttributes(self, attrs)
    def buildChildren(self, child_, nodeName_):
        BaggageMakeUpBeltInfo.buildChildren(self, child_, nodeName_)
# end class BagMakeUpBelt


class InFlightService(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cabin=None, Service=None):
        self.Cabin = Cabin
        if Service is None:
            self.Service = []
        else:
            self.Service = Service
    def factory(*args_, **kwargs_):
        if InFlightService.subclass:
            return InFlightService.subclass(*args_, **kwargs_)
        else:
            return InFlightService(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cabin(self): return self.Cabin
    def set_Cabin(self, Cabin): self.Cabin = Cabin
    def validate_Cabin(self, value):
        # validate type Cabin
        pass
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def add_Service(self, value): self.Service.append(value)
    def insert_Service(self, index, value): self.Service[index] = value
    def export(self, outfile, level, namespace_='', name_='InFlightService', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='InFlightService')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='InFlightService'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InFlightService'):
        if self.Cabin is not None:
            showIndent(outfile, level)
            outfile.write('<%sCabin>%s</%sCabin>\n' % (namespace_, self.format_string(quote_xml(self.Cabin).encode(ExternalEncoding), input_name='Cabin'), namespace_))
        for Service_ in self.Service:
            showIndent(outfile, level)
            outfile.write('<%sService>%s</%sService>\n' % (namespace_, self.format_integer(Service_, input_name='Service'), namespace_))
    def hasContent_(self):
        if (
            self.Cabin is not None or
            self.Service is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='InFlightService'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Cabin=%s,\n' % quote_python(self.Cabin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Service=[\n')
        level += 1
        for Service in self.Service:
            showIndent(outfile, level)
            outfile.write('model_.Service(\n')
            Service.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Cabin':
            Cabin_ = ''
            for text__content_ in child_.childNodes:
                Cabin_ += text__content_.nodeValue
            self.Cabin = Cabin_
            self.validate_Cabin(self.Cabin)    # validate type Cabin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Service':
            self.Service.append(obj_)
# end class InFlightService


class Service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, elementIndex=None, valueOf_=''):
        self.elementIndex = elementIndex
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if Service.subclass:
            return Service.subclass(*args_, **kwargs_)
        else:
            return Service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_elementIndex(self): return self.elementIndex
    def set_elementIndex(self, elementIndex): self.elementIndex = elementIndex
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='Service', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Service')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Service'):
        if self.elementIndex is not None:
            outfile.write(' elementIndex=%s' % (self.format_string(quote_attrib(self.elementIndex).encode(ExternalEncoding), input_name='elementIndex'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='Service'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.elementIndex is not None:
            showIndent(outfile, level)
            outfile.write('elementIndex = %s,\n' % (self.elementIndex,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('elementIndex'):
            self.elementIndex = attrs.get('elementIndex').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class Service


class FlightLegKey(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Carrier=None, FlightNumber=None, Suffix=None, ScheduledDateTime=None, InOutbound=None, OriginDestinationAirportCode=None):
        self.Carrier = Carrier
        self.FlightNumber = FlightNumber
        self.Suffix = Suffix
        self.ScheduledDateTime = ScheduledDateTime
        self.InOutbound = InOutbound
        self.OriginDestinationAirportCode = OriginDestinationAirportCode
    def factory(*args_, **kwargs_):
        if FlightLegKey.subclass:
            return FlightLegKey.subclass(*args_, **kwargs_)
        else:
            return FlightLegKey(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def validate_Carrier(self, value):
        # validate type Carrier
        pass
    def get_FlightNumber(self): return self.FlightNumber
    def set_FlightNumber(self, FlightNumber): self.FlightNumber = FlightNumber
    def validate_FlightNumber(self, value):
        # Validate type FlightNumber, a restriction on xsd:positiveInteger.
        pass
    def get_Suffix(self): return self.Suffix
    def set_Suffix(self, Suffix): self.Suffix = Suffix
    def validate_Suffix(self, value):
        # Validate type Suffix, a restriction on xsd:string.
        pass
    def get_ScheduledDateTime(self): return self.ScheduledDateTime
    def set_ScheduledDateTime(self, ScheduledDateTime): self.ScheduledDateTime = ScheduledDateTime
    def validate_ScheduledDateTime(self, value):
        # validate type ScheduledDateTime
        pass
    def get_InOutbound(self): return self.InOutbound
    def set_InOutbound(self, InOutbound): self.InOutbound = InOutbound
    def get_OriginDestinationAirportCode(self): return self.OriginDestinationAirportCode
    def set_OriginDestinationAirportCode(self, OriginDestinationAirportCode): self.OriginDestinationAirportCode = OriginDestinationAirportCode
    def validate_OriginDestinationAirportCode(self, value):
        # validate type OriginDestinationAirportCode
        pass
    def export(self, outfile, level, namespace_='', name_='FlightLegKey', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='FlightLegKey')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='FlightLegKey'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FlightLegKey'):
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrier>%s</%sCarrier>\n' % (namespace_, self.format_string(quote_xml(self.Carrier).encode(ExternalEncoding), input_name='Carrier'), namespace_))
        if self.FlightNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightNumber>%s</%sFlightNumber>\n' % (namespace_, self.format_integer(self.FlightNumber, input_name='FlightNumber'), namespace_))
        if self.Suffix is not None:
            showIndent(outfile, level)
            outfile.write('<%sSuffix>%s</%sSuffix>\n' % (namespace_, self.format_string(quote_xml(self.Suffix).encode(ExternalEncoding), input_name='Suffix'), namespace_))
        if self.ScheduledDateTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sScheduledDateTime>%s</%sScheduledDateTime>\n' % (namespace_, self.format_string(quote_xml(self.ScheduledDateTime).encode(ExternalEncoding), input_name='ScheduledDateTime'), namespace_))
        if self.InOutbound is not None:
            showIndent(outfile, level)
            outfile.write('<%sInOutbound>%s</%sInOutbound>\n' % (namespace_, self.format_integer(self.InOutbound, input_name='InOutbound'), namespace_))
        if self.OriginDestinationAirportCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sOriginDestinationAirportCode>%s</%sOriginDestinationAirportCode>\n' % (namespace_, self.format_string(quote_xml(self.OriginDestinationAirportCode).encode(ExternalEncoding), input_name='OriginDestinationAirportCode'), namespace_))
    def hasContent_(self):
        if (
            self.Carrier is not None or
            self.FlightNumber is not None or
            self.Suffix is not None or
            self.ScheduledDateTime is not None or
            self.InOutbound is not None or
            self.OriginDestinationAirportCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FlightLegKey'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Carrier=%s,\n' % quote_python(self.Carrier).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('FlightNumber=%d,\n' % self.FlightNumber)
        showIndent(outfile, level)
        outfile.write('Suffix=%s,\n' % quote_python(self.Suffix).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ScheduledDateTime=%s,\n' % quote_python(self.ScheduledDateTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('InOutbound=%s,\n' % quote_python(self.InOutbound).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('OriginDestinationAirportCode=%s,\n' % quote_python(self.OriginDestinationAirportCode).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Carrier':
            Carrier_ = ''
            for text__content_ in child_.childNodes:
                Carrier_ += text__content_.nodeValue
            self.Carrier = Carrier_
            self.validate_Carrier(self.Carrier)    # validate type Carrier
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightNumber':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (FlightNumber): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.FlightNumber = ival_
            self.validate_FlightNumber(self.FlightNumber)    # validate type FlightNumber
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Suffix':
            Suffix_ = ''
            for text__content_ in child_.childNodes:
                Suffix_ += text__content_.nodeValue
            self.Suffix = Suffix_
            self.validate_Suffix(self.Suffix)    # validate type Suffix
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ScheduledDateTime':
            ScheduledDateTime_ = ''
            for text__content_ in child_.childNodes:
                ScheduledDateTime_ += text__content_.nodeValue
            self.ScheduledDateTime = ScheduledDateTime_
            self.validate_ScheduledDateTime(self.ScheduledDateTime)    # validate type ScheduledDateTime
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'InOutbound':
            InOutbound_ = ''
            for text__content_ in child_.childNodes:
                InOutbound_ += text__content_.nodeValue
            self.InOutbound = InOutbound_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'OriginDestinationAirportCode':
            OriginDestinationAirportCode_ = ''
            for text__content_ in child_.childNodes:
                OriginDestinationAirportCode_ += text__content_.nodeValue
            self.OriginDestinationAirportCode = OriginDestinationAirportCode_
            self.validate_OriginDestinationAirportCode(self.OriginDestinationAirportCode)    # validate type OriginDestinationAirportCode
# end class FlightLegKey


class FlightLinkData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FlightID=None):
        self.FlightID = FlightID
    def factory(*args_, **kwargs_):
        if FlightLinkData.subclass:
            return FlightLinkData.subclass(*args_, **kwargs_)
        else:
            return FlightLinkData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FlightID(self): return self.FlightID
    def set_FlightID(self, FlightID): self.FlightID = FlightID
    def export(self, outfile, level, namespace_='', name_='FlightLinkData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='FlightLinkData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='FlightLinkData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FlightLinkData'):
        if self.FlightID is not None:
            showIndent(outfile, level)
            outfile.write('<%sFlightID>%s</%sFlightID>\n' % (namespace_, self.format_integer(self.FlightID, input_name='FlightID'), namespace_))
    def hasContent_(self):
        if (
            self.FlightID is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FlightLinkData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FlightID:
            showIndent(outfile, level)
            outfile.write('FlightID=model_.FlightID(\n')
            self.FlightID.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'FlightID':
            obj_ = FlightID.factory()
            obj_.build(child_)
            self.set_FlightID(obj_)
# end class FlightLinkData


class Irregularity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IATAIrregularityCode=None, IrregularityText=None):
        self.IATAIrregularityCode = IATAIrregularityCode
        self.IrregularityText = IrregularityText
    def factory(*args_, **kwargs_):
        if Irregularity.subclass:
            return Irregularity.subclass(*args_, **kwargs_)
        else:
            return Irregularity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IATAIrregularityCode(self): return self.IATAIrregularityCode
    def set_IATAIrregularityCode(self, IATAIrregularityCode): self.IATAIrregularityCode = IATAIrregularityCode
    def validate_IATAIrregularityCode(self, value):
        # validate type IATAIrregularityCode
        pass
    def get_IrregularityText(self): return self.IrregularityText
    def set_IrregularityText(self, IrregularityText): self.IrregularityText = IrregularityText
    def validate_IrregularityText(self, value):
        # validate type IrregularityText
        pass
    def export(self, outfile, level, namespace_='', name_='Irregularity', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Irregularity')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Irregularity'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Irregularity'):
        if self.IATAIrregularityCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sIATAIrregularityCode>%s</%sIATAIrregularityCode>\n' % (namespace_, self.format_integer(self.IATAIrregularityCode, input_name='IATAIrregularityCode'), namespace_))
        if self.IrregularityText is not None:
            showIndent(outfile, level)
            outfile.write('<%sIrregularityText>%s</%sIrregularityText>\n' % (namespace_, self.format_string(quote_xml(self.IrregularityText).encode(ExternalEncoding), input_name='IrregularityText'), namespace_))
    def hasContent_(self):
        if (
            self.IATAIrregularityCode is not None or
            self.IrregularityText is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Irregularity'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('IATAIrregularityCode=%d,\n' % self.IATAIrregularityCode)
        showIndent(outfile, level)
        outfile.write('IrregularityText=%s,\n' % quote_python(self.IrregularityText).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'IATAIrregularityCode':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (IATAIrregularityCode): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.IATAIrregularityCode = ival_
            self.validate_IATAIrregularityCode(self.IATAIrregularityCode)    # validate type IATAIrregularityCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'IrregularityText':
            IrregularityText_ = ''
            for text__content_ in child_.childNodes:
                IrregularityText_ += text__content_.nodeValue
            self.IrregularityText = IrregularityText_
            self.validate_IrregularityText(self.IrregularityText)    # validate type IrregularityText
# end class Irregularity


class NoiseClassification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoiseValue=None, NoiseCategoryUnits=None):
        self.NoiseValue = NoiseValue
        self.NoiseCategoryUnits = NoiseCategoryUnits
    def factory(*args_, **kwargs_):
        if NoiseClassification.subclass:
            return NoiseClassification.subclass(*args_, **kwargs_)
        else:
            return NoiseClassification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoiseValue(self): return self.NoiseValue
    def set_NoiseValue(self, NoiseValue): self.NoiseValue = NoiseValue
    def validate_NoiseValue(self, value):
        # Validate type NoiseValue, a restriction on xsd:nonNegativeInteger.
        pass
    def get_NoiseCategoryUnits(self): return self.NoiseCategoryUnits
    def set_NoiseCategoryUnits(self, NoiseCategoryUnits): self.NoiseCategoryUnits = NoiseCategoryUnits
    def validate_NoiseCategoryUnits(self, value):
        # validate type NoiseCategoryUnits
        pass
    def export(self, outfile, level, namespace_='', name_='NoiseClassification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='NoiseClassification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='NoiseClassification'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NoiseClassification'):
        if self.NoiseValue is not None:
            showIndent(outfile, level)
            outfile.write('<%sNoiseValue>%s</%sNoiseValue>\n' % (namespace_, self.format_integer(self.NoiseValue, input_name='NoiseValue'), namespace_))
        if self.NoiseCategoryUnits is not None:
            showIndent(outfile, level)
            outfile.write('<%sNoiseCategoryUnits>%s</%sNoiseCategoryUnits>\n' % (namespace_, self.format_string(quote_xml(self.NoiseCategoryUnits).encode(ExternalEncoding), input_name='NoiseCategoryUnits'), namespace_))
    def hasContent_(self):
        if (
            self.NoiseValue is not None or
            self.NoiseCategoryUnits is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NoiseClassification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('NoiseValue=%d,\n' % self.NoiseValue)
        showIndent(outfile, level)
        outfile.write('NoiseCategoryUnits=%s,\n' % quote_python(self.NoiseCategoryUnits).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'NoiseValue':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (NoiseValue): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.NoiseValue = ival_
            self.validate_NoiseValue(self.NoiseValue)    # validate type NoiseValue
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'NoiseCategoryUnits':
            NoiseCategoryUnits_ = ''
            for text__content_ in child_.childNodes:
                NoiseCategoryUnits_ += text__content_.nodeValue
            self.NoiseCategoryUnits = NoiseCategoryUnits_
            self.validate_NoiseCategoryUnits(self.NoiseCategoryUnits)    # validate type NoiseCategoryUnits
# end class NoiseClassification


class SeatingCapacity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CapacityData=None):
        if CapacityData is None:
            self.CapacityData = []
        else:
            self.CapacityData = CapacityData
    def factory(*args_, **kwargs_):
        if SeatingCapacity.subclass:
            return SeatingCapacity.subclass(*args_, **kwargs_)
        else:
            return SeatingCapacity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CapacityData(self): return self.CapacityData
    def set_CapacityData(self, CapacityData): self.CapacityData = CapacityData
    def add_CapacityData(self, value): self.CapacityData.append(value)
    def insert_CapacityData(self, index, value): self.CapacityData[index] = value
    def export(self, outfile, level, namespace_='', name_='SeatingCapacity', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='SeatingCapacity')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='SeatingCapacity'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SeatingCapacity'):
        for CapacityData_ in self.CapacityData:
            showIndent(outfile, level)
            outfile.write('<%sCapacityData>%s</%sCapacityData>\n' % (namespace_, self.format_integer(CapacityData_, input_name='CapacityData'), namespace_))
    def hasContent_(self):
        if (
            self.CapacityData is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SeatingCapacity'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('CapacityData=[\n')
        level += 1
        for CapacityData in self.CapacityData:
            showIndent(outfile, level)
            outfile.write('model_.CapacityData(\n')
            CapacityData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'CapacityData':
            obj_ = CapacityData.factory()
            obj_.build(child_)
            self.CapacityData.append(obj_)
# end class SeatingCapacity


class CapacityData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cabin=None, SeatCount=None):
        self.Cabin = Cabin
        self.SeatCount = SeatCount
    def factory(*args_, **kwargs_):
        if CapacityData.subclass:
            return CapacityData.subclass(*args_, **kwargs_)
        else:
            return CapacityData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cabin(self): return self.Cabin
    def set_Cabin(self, Cabin): self.Cabin = Cabin
    def validate_Cabin(self, value):
        # validate type Cabin
        pass
    def get_SeatCount(self): return self.SeatCount
    def set_SeatCount(self, SeatCount): self.SeatCount = SeatCount
    def validate_SeatCount(self, value):
        # Validate type SeatCount, a restriction on xsd:nonNegativeInteger.
        pass
    def export(self, outfile, level, namespace_='', name_='CapacityData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='CapacityData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='CapacityData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CapacityData'):
        if self.Cabin is not None:
            showIndent(outfile, level)
            outfile.write('<%sCabin>%s</%sCabin>\n' % (namespace_, self.format_string(quote_xml(self.Cabin).encode(ExternalEncoding), input_name='Cabin'), namespace_))
        if self.SeatCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sSeatCount>%s</%sSeatCount>\n' % (namespace_, self.format_integer(self.SeatCount, input_name='SeatCount'), namespace_))
    def hasContent_(self):
        if (
            self.Cabin is not None or
            self.SeatCount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CapacityData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Cabin=%s,\n' % quote_python(self.Cabin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SeatCount=%d,\n' % self.SeatCount)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Cabin':
            Cabin_ = ''
            for text__content_ in child_.childNodes:
                Cabin_ += text__content_.nodeValue
            self.Cabin = Cabin_
            self.validate_Cabin(self.Cabin)    # validate type Cabin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'SeatCount':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (SeatCount): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.SeatCount = ival_
            self.validate_SeatCount(self.SeatCount)    # validate type SeatCount
# end class CapacityData


class SupplementaryPassengerData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cabin=None, PassengerType=None, PassengerCount=None):
        self.Cabin = Cabin
        self.PassengerType = PassengerType
        self.PassengerCount = PassengerCount
    def factory(*args_, **kwargs_):
        if SupplementaryPassengerData.subclass:
            return SupplementaryPassengerData.subclass(*args_, **kwargs_)
        else:
            return SupplementaryPassengerData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cabin(self): return self.Cabin
    def set_Cabin(self, Cabin): self.Cabin = Cabin
    def validate_Cabin(self, value):
        # validate type Cabin
        pass
    def get_PassengerType(self): return self.PassengerType
    def set_PassengerType(self, PassengerType): self.PassengerType = PassengerType
    def validate_PassengerType(self, value):
        # validate type PassengerType
        pass
    def get_PassengerCount(self): return self.PassengerCount
    def set_PassengerCount(self, PassengerCount): self.PassengerCount = PassengerCount
    def validate_PassengerCount(self, value):
        # Validate type PassengerCount, a restriction on xsd:nonNegativeInteger.
        pass
    def export(self, outfile, level, namespace_='', name_='SupplementaryPassengerData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='SupplementaryPassengerData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='SupplementaryPassengerData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SupplementaryPassengerData'):
        if self.Cabin is not None:
            showIndent(outfile, level)
            outfile.write('<%sCabin>%s</%sCabin>\n' % (namespace_, self.format_string(quote_xml(self.Cabin).encode(ExternalEncoding), input_name='Cabin'), namespace_))
        if self.PassengerType is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassengerType>%s</%sPassengerType>\n' % (namespace_, self.format_string(quote_xml(self.PassengerType).encode(ExternalEncoding), input_name='PassengerType'), namespace_))
        if self.PassengerCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassengerCount>%s</%sPassengerCount>\n' % (namespace_, self.format_integer(self.PassengerCount, input_name='PassengerCount'), namespace_))
    def hasContent_(self):
        if (
            self.Cabin is not None or
            self.PassengerType is not None or
            self.PassengerCount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SupplementaryPassengerData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Cabin=%s,\n' % quote_python(self.Cabin).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('PassengerType=%s,\n' % quote_python(self.PassengerType).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('PassengerCount=%d,\n' % self.PassengerCount)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Cabin':
            Cabin_ = ''
            for text__content_ in child_.childNodes:
                Cabin_ += text__content_.nodeValue
            self.Cabin = Cabin_
            self.validate_Cabin(self.Cabin)    # validate type Cabin
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PassengerType':
            PassengerType_ = ''
            for text__content_ in child_.childNodes:
                PassengerType_ += text__content_.nodeValue
            self.PassengerType = PassengerType_
            self.validate_PassengerType(self.PassengerType)    # validate type PassengerType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'PassengerCount':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (PassengerCount): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.PassengerCount = ival_
            self.validate_PassengerCount(self.PassengerCount)    # validate type PassengerCount
# end class SupplementaryPassengerData


class PassengerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if PassengerType.subclass:
            return PassengerType.subclass(*args_, **kwargs_)
        else:
            return PassengerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='PassengerType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='PassengerType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='PassengerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PassengerType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PassengerType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class PassengerType


class Station(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Airport=None, StationPublicRemark=None):
        self.Airport = Airport
        self.StationPublicRemark = StationPublicRemark
    def factory(*args_, **kwargs_):
        if Station.subclass:
            return Station.subclass(*args_, **kwargs_)
        else:
            return Station(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Airport(self): return self.Airport
    def set_Airport(self, Airport): self.Airport = Airport
    def validate_Airport(self, value):
        # validate type Airport
        pass
    def get_StationPublicRemark(self): return self.StationPublicRemark
    def set_StationPublicRemark(self, StationPublicRemark): self.StationPublicRemark = StationPublicRemark
    def validate_StationPublicRemark(self, value):
        # validate type StationPublicRemark
        pass
    def export(self, outfile, level, namespace_='', name_='Station', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Station')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Station'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Station'):
        if self.Airport is not None:
            showIndent(outfile, level)
            outfile.write('<%sAirport>%s</%sAirport>\n' % (namespace_, self.format_string(quote_xml(self.Airport).encode(ExternalEncoding), input_name='Airport'), namespace_))
        if self.StationPublicRemark is not None:
            showIndent(outfile, level)
            outfile.write('<%sStationPublicRemark>%s</%sStationPublicRemark>\n' % (namespace_, self.format_string(quote_xml(self.StationPublicRemark).encode(ExternalEncoding), input_name='StationPublicRemark'), namespace_))
    def hasContent_(self):
        if (
            self.Airport is not None or
            self.StationPublicRemark is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Station'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Airport=%s,\n' % quote_python(self.Airport).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('StationPublicRemark=%s,\n' % quote_python(self.StationPublicRemark).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Airport':
            Airport_ = ''
            for text__content_ in child_.childNodes:
                Airport_ += text__content_.nodeValue
            self.Airport = Airport_
            self.validate_Airport(self.Airport)    # validate type Airport
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'StationPublicRemark':
            StationPublicRemark_ = ''
            for text__content_ in child_.childNodes:
                StationPublicRemark_ += text__content_.nodeValue
            self.StationPublicRemark = StationPublicRemark_
            self.validate_StationPublicRemark(self.StationPublicRemark)    # validate type StationPublicRemark
# end class Station


class RIDSRemark(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GeneralInformation=None, MaintenanceCode=None, RadioFrequency=None, ServiceCode=None):
        self.GeneralInformation = GeneralInformation
        self.MaintenanceCode = MaintenanceCode
        self.RadioFrequency = RadioFrequency
        self.ServiceCode = ServiceCode
    def factory(*args_, **kwargs_):
        if RIDSRemark.subclass:
            return RIDSRemark.subclass(*args_, **kwargs_)
        else:
            return RIDSRemark(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GeneralInformation(self): return self.GeneralInformation
    def set_GeneralInformation(self, GeneralInformation): self.GeneralInformation = GeneralInformation
    def validate_GeneralInformation(self, value):
        # validate type GeneralInformation
        pass
    def get_MaintenanceCode(self): return self.MaintenanceCode
    def set_MaintenanceCode(self, MaintenanceCode): self.MaintenanceCode = MaintenanceCode
    def validate_MaintenanceCode(self, value):
        # validate type MaintenanceCode
        pass
    def get_RadioFrequency(self): return self.RadioFrequency
    def set_RadioFrequency(self, RadioFrequency): self.RadioFrequency = RadioFrequency
    def validate_RadioFrequency(self, value):
        # validate type RadioFrequency
        pass
    def get_ServiceCode(self): return self.ServiceCode
    def set_ServiceCode(self, ServiceCode): self.ServiceCode = ServiceCode
    def validate_ServiceCode(self, value):
        # validate type ServiceCode
        pass
    def export(self, outfile, level, namespace_='', name_='RIDSRemark', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='RIDSRemark')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='RIDSRemark'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RIDSRemark'):
        if self.GeneralInformation is not None:
            showIndent(outfile, level)
            outfile.write('<%sGeneralInformation>%s</%sGeneralInformation>\n' % (namespace_, self.format_string(quote_xml(self.GeneralInformation).encode(ExternalEncoding), input_name='GeneralInformation'), namespace_))
        if self.MaintenanceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sMaintenanceCode>%s</%sMaintenanceCode>\n' % (namespace_, self.format_string(quote_xml(self.MaintenanceCode).encode(ExternalEncoding), input_name='MaintenanceCode'), namespace_))
        if self.RadioFrequency is not None:
            showIndent(outfile, level)
            outfile.write('<%sRadioFrequency>%s</%sRadioFrequency>\n' % (namespace_, self.format_string(quote_xml(self.RadioFrequency).encode(ExternalEncoding), input_name='RadioFrequency'), namespace_))
        if self.ServiceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceCode>%s</%sServiceCode>\n' % (namespace_, self.format_string(quote_xml(self.ServiceCode).encode(ExternalEncoding), input_name='ServiceCode'), namespace_))
    def hasContent_(self):
        if (
            self.GeneralInformation is not None or
            self.MaintenanceCode is not None or
            self.RadioFrequency is not None or
            self.ServiceCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RIDSRemark'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('GeneralInformation=%s,\n' % quote_python(self.GeneralInformation).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MaintenanceCode=%s,\n' % quote_python(self.MaintenanceCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RadioFrequency=%s,\n' % quote_python(self.RadioFrequency).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ServiceCode=%s,\n' % quote_python(self.ServiceCode).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'GeneralInformation':
            GeneralInformation_ = ''
            for text__content_ in child_.childNodes:
                GeneralInformation_ += text__content_.nodeValue
            self.GeneralInformation = GeneralInformation_
            self.validate_GeneralInformation(self.GeneralInformation)    # validate type GeneralInformation
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'MaintenanceCode':
            MaintenanceCode_ = ''
            for text__content_ in child_.childNodes:
                MaintenanceCode_ += text__content_.nodeValue
            self.MaintenanceCode = MaintenanceCode_
            self.validate_MaintenanceCode(self.MaintenanceCode)    # validate type MaintenanceCode
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'RadioFrequency':
            RadioFrequency_ = ''
            for text__content_ in child_.childNodes:
                RadioFrequency_ += text__content_.nodeValue
            self.RadioFrequency = RadioFrequency_
            self.validate_RadioFrequency(self.RadioFrequency)    # validate type RadioFrequency
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ServiceCode':
            ServiceCode_ = ''
            for text__content_ in child_.childNodes:
                ServiceCode_ += text__content_.nodeValue
            self.ServiceCode = ServiceCode_
            self.validate_ServiceCode(self.ServiceCode)    # validate type ServiceCode
# end class RIDSRemark


class GeneralInformation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if GeneralInformation.subclass:
            return GeneralInformation.subclass(*args_, **kwargs_)
        else:
            return GeneralInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='GeneralInformation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='GeneralInformation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='GeneralInformation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='GeneralInformation'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GeneralInformation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class GeneralInformation


class MaintenanceCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if MaintenanceCode.subclass:
            return MaintenanceCode.subclass(*args_, **kwargs_)
        else:
            return MaintenanceCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='MaintenanceCode', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='MaintenanceCode')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='MaintenanceCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MaintenanceCode'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MaintenanceCode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class MaintenanceCode


class RadioFrequency(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if RadioFrequency.subclass:
            return RadioFrequency.subclass(*args_, **kwargs_)
        else:
            return RadioFrequency(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='RadioFrequency', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='RadioFrequency')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='RadioFrequency'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RadioFrequency'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RadioFrequency'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class RadioFrequency


class ServiceCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ServiceCode.subclass:
            return ServiceCode.subclass(*args_, **kwargs_)
        else:
            return ServiceCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='ServiceCode', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='ServiceCode')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='ServiceCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceCode'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ServiceCode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class ServiceCode


class WeightData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Weight=None, WeightUnit=None):
        self.Weight = Weight
        self.WeightUnit = WeightUnit
    def factory(*args_, **kwargs_):
        if WeightData.subclass:
            return WeightData.subclass(*args_, **kwargs_)
        else:
            return WeightData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def validate_Weight(self, value):
        # validate type Weight
        pass
    def get_WeightUnit(self): return self.WeightUnit
    def set_WeightUnit(self, WeightUnit): self.WeightUnit = WeightUnit
    def validate_WeightUnit(self, value):
        # validate type WeightUnit
        pass
    def export(self, outfile, level, namespace_='', name_='WeightData', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='WeightData')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='WeightData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='WeightData'):
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('<%sWeight>%s</%sWeight>\n' % (namespace_, self.format_integer(self.Weight, input_name='Weight'), namespace_))
        if self.WeightUnit is not None:
            showIndent(outfile, level)
            outfile.write('<%sWeightUnit>%s</%sWeightUnit>\n' % (namespace_, self.format_string(quote_xml(self.WeightUnit).encode(ExternalEncoding), input_name='WeightUnit'), namespace_))
    def hasContent_(self):
        if (
            self.Weight is not None or
            self.WeightUnit is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WeightData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Weight=%d,\n' % self.Weight)
        showIndent(outfile, level)
        outfile.write('WeightUnit=%s,\n' % quote_python(self.WeightUnit).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'Weight':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (Weight): %s' % exp)
                if ival_ < 0:
                    raise ValueError('requires nonNegativeInteger -- %s' % child_.toxml())
                self.Weight = ival_
            self.validate_Weight(self.Weight)    # validate type Weight
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'WeightUnit':
            WeightUnit_ = ''
            for text__content_ in child_.childNodes:
                WeightUnit_ += text__content_.nodeValue
            self.WeightUnit = WeightUnit_
            self.validate_WeightUnit(self.WeightUnit)    # validate type WeightUnit
# end class WeightData


class Stopover(Station):
    subclass = None
    superclass = Station
    def __init__(self, Airport=None, StationPublicRemark=None, elementIndex=None):
        Station.__init__(self, Airport, StationPublicRemark)
        self.elementIndex = elementIndex
        pass
    def factory(*args_, **kwargs_):
        if Stopover.subclass:
            return Stopover.subclass(*args_, **kwargs_)
        else:
            return Stopover(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_elementIndex(self): return self.elementIndex
    def set_elementIndex(self, elementIndex): self.elementIndex = elementIndex
    def export(self, outfile, level, namespace_='', name_='Stopover', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='Stopover')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="Stopover"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='Stopover'):
        Station.exportAttributes(self, outfile, level, namespace_, name_='Stopover')
        if self.elementIndex is not None:
            outfile.write(' elementIndex=%s' % (self.format_string(quote_attrib(self.elementIndex).encode(ExternalEncoding), input_name='elementIndex'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='Stopover'):
        Station.exportChildren(self, outfile, level, namespace_, name_)
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Stopover'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.elementIndex is not None:
            showIndent(outfile, level)
            outfile.write('elementIndex = %s,\n' % (self.elementIndex,))
        Station.exportLiteralAttributes(self, outfile, level, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        Station.exportLiteralChildren(self, outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('elementIndex'):
            self.elementIndex = attrs.get('elementIndex').value
        Station.buildAttributes(self, attrs)
    def buildChildren(self, child_, nodeName_):
        Station.buildChildren(self, child_, nodeName_)
# end class Stopover


class UnusualCargo(CargoData):
    subclass = None
    superclass = CargoData
    def __init__(self, Pieces=None, CargoWeight=None, UnusualCargoType=None):
        CargoData.__init__(self, Pieces, CargoWeight)
        self.UnusualCargoType = UnusualCargoType
    def factory(*args_, **kwargs_):
        if UnusualCargo.subclass:
            return UnusualCargo.subclass(*args_, **kwargs_)
        else:
            return UnusualCargo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnusualCargoType(self): return self.UnusualCargoType
    def set_UnusualCargoType(self, UnusualCargoType): self.UnusualCargoType = UnusualCargoType
    def validate_UnusualCargoType(self, value):
        # validate type UnusualCargoType
        pass
    def export(self, outfile, level, namespace_='', name_='UnusualCargo', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s %s' % (namespace_, name_, namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='UnusualCargo')
        outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
        outfile.write(' xsi:type="UnusualCargo"')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='UnusualCargo'):
        CargoData.exportAttributes(self, outfile, level, namespace_, name_='UnusualCargo')
    def exportChildren(self, outfile, level, namespace_='', name_='UnusualCargo'):
        CargoData.exportChildren(self, outfile, level, namespace_, name_)
        if self.UnusualCargoType is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnusualCargoType>%s</%sUnusualCargoType>\n' % (namespace_, self.format_string(quote_xml(self.UnusualCargoType).encode(ExternalEncoding), input_name='UnusualCargoType'), namespace_))
    def hasContent_(self):
        if (
            self.UnusualCargoType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UnusualCargo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
        CargoData.exportLiteralAttributes(self, outfile, level, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        CargoData.exportLiteralChildren(self, outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('UnusualCargoType=%s,\n' % quote_python(self.UnusualCargoType).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        CargoData.buildAttributes(self, attrs)
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'UnusualCargoType':
            UnusualCargoType_ = ''
            for text__content_ in child_.childNodes:
                UnusualCargoType_ += text__content_.nodeValue
            self.UnusualCargoType = UnusualCargoType_
            self.validate_UnusualCargoType(self.UnusualCargoType)    # validate type UnusualCargoType
        CargoData.buildChildren(self, child_, nodeName_)
# end class UnusualCargo


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
Options:
    -s        Use the SAX parser, not the minidom parser.
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = Envelope.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="Eonvelope",
        namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = Envelope.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="Eonvelope",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = Envelope.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('from aodb import *\n\n')
    sys.stdout.write('rootObj = Eonvelope(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_="Eonvelope")
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()
    #import pdb
    #pdb.run('main()')

